
PROJECT_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f04  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800208c  0800208c  0000308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020f4  080020f4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080020f4  080020f4  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020f4  080020f4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020f4  080020f4  000030f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020f8  080020f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080020fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000244  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000033cd  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f0b  00000000  00000000  00007459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00008368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000262  00000000  00000000  000086d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ee2  00000000  00000000  0000893a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a71  00000000  00000000  0000c81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cd4c  00000000  00000000  0001128d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001dfd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000011f4  00000000  00000000  0001e01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0001f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002074 	.word	0x08002074

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08002074 	.word	0x08002074

080001c8 <main>:





int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0


	ENABLE_FPU();
 80001cc:	f000 fb16 	bl	80007fc <SystemInit>
	TimerInit(TIMER9);
 80001d0:	4807      	ldr	r0, [pc, #28]	@ (80001f0 <main+0x28>)
 80001d2:	f000 fb3d 	bl	8000850 <TimerInit>
	userApplicationInit();
 80001d6:	f001 fa1d 	bl	8001614 <userApplicationInit>
	ioExpanderInit();
 80001da:	f000 fdf9 	bl	8000dd0 <ioExpanderInit>
	while (1) {
		update_Data_From_Appllication();
 80001de:	f000 fe11 	bl	8000e04 <update_Data_From_Appllication>
		MilliSecondsDelay(1000);
 80001e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e6:	f000 fb77 	bl	80008d8 <MilliSecondsDelay>
		update_Data_From_Appllication();
 80001ea:	bf00      	nop
 80001ec:	e7f7      	b.n	80001de <main+0x16>
 80001ee:	bf00      	nop
 80001f0:	40014000 	.word	0x40014000

080001f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]
 8000204:	e00a      	b.n	800021c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000206:	f3af 8000 	nop.w
 800020a:	4601      	mov	r1, r0
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	60ba      	str	r2, [r7, #8]
 8000212:	b2ca      	uxtb	r2, r1
 8000214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	3301      	adds	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	697a      	ldr	r2, [r7, #20]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	429a      	cmp	r2, r3
 8000222:	dbf0      	blt.n	8000206 <_read+0x12>
  }

  return len;
 8000224:	687b      	ldr	r3, [r7, #4]
}
 8000226:	4618      	mov	r0, r3
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}

0800022e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b086      	sub	sp, #24
 8000232:	af00      	add	r7, sp, #0
 8000234:	60f8      	str	r0, [r7, #12]
 8000236:	60b9      	str	r1, [r7, #8]
 8000238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	e009      	b.n	8000254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	60ba      	str	r2, [r7, #8]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4618      	mov	r0, r3
 800024a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	3301      	adds	r3, #1
 8000252:	617b      	str	r3, [r7, #20]
 8000254:	697a      	ldr	r2, [r7, #20]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	dbf1      	blt.n	8000240 <_write+0x12>
  }
  return len;
 800025c:	687b      	ldr	r3, [r7, #4]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3718      	adds	r7, #24
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <_close>:

int _close(int file)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800026e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800027e:	b480      	push	{r7}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800028e:	605a      	str	r2, [r3, #4]
  return 0;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <_isatty>:

int _isatty(int file)
{
 800029e:	b480      	push	{r7}
 80002a0:	b083      	sub	sp, #12
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002a6:	2301      	movs	r3, #1
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002d8:	4a14      	ldr	r2, [pc, #80]	@ (800032c <_sbrk+0x5c>)
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <_sbrk+0x60>)
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002e4:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <_sbrk+0x64>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002ec:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <_sbrk+0x64>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <_sbrk+0x68>)
 80002f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002f2:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <_sbrk+0x64>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d207      	bcs.n	8000310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000300:	f001 fc52 	bl	8001ba8 <__errno>
 8000304:	4603      	mov	r3, r0
 8000306:	220c      	movs	r2, #12
 8000308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800030a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800030e:	e009      	b.n	8000324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <_sbrk+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000316:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <_sbrk+0x64>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <_sbrk+0x64>)
 8000320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000322:	68fb      	ldr	r3, [r7, #12]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20020000 	.word	0x20020000
 8000330:	00000400 	.word	0x00000400
 8000334:	20000078 	.word	0x20000078
 8000338:	200002a0 	.word	0x200002a0

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f000 fa5c 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	@ (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	@ (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f001 fc23 	bl	8001bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff2b 	bl	80001c8 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000380:	080020fc 	.word	0x080020fc
  ldr r2, =_sbss
 8000384:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000388:	200002a0 	.word	0x200002a0

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <GpioPinSet>:
	port->MODER &= ~(0xFFFFFFFF);
	port->MODER = data;
	return SUCCESS;
}

uint8_t GpioPinSet(gpio_handler_t data) {
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (data.port == GPIOA) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a70      	ldr	r2, [pc, #448]	@ (8000560 <GpioPinSet+0x1d0>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GpioPinSet+0x22>

		GPIOAEN;
 80003a4:	4b6f      	ldr	r3, [pc, #444]	@ (8000564 <GpioPinSet+0x1d4>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a6e      	ldr	r2, [pc, #440]	@ (8000564 <GpioPinSet+0x1d4>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b0:	e035      	b.n	800041e <GpioPinSet+0x8e>

	} else if (data.port == GPIOB) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a6c      	ldr	r2, [pc, #432]	@ (8000568 <GpioPinSet+0x1d8>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GpioPinSet+0x38>

		GPIOBEN;
 80003ba:	4b6a      	ldr	r3, [pc, #424]	@ (8000564 <GpioPinSet+0x1d4>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003be:	4a69      	ldr	r2, [pc, #420]	@ (8000564 <GpioPinSet+0x1d4>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003c6:	e02a      	b.n	800041e <GpioPinSet+0x8e>

	} else if (data.port == GPIOC) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a68      	ldr	r2, [pc, #416]	@ (800056c <GpioPinSet+0x1dc>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GpioPinSet+0x4e>

		GPIOCEN;
 80003d0:	4b64      	ldr	r3, [pc, #400]	@ (8000564 <GpioPinSet+0x1d4>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d4:	4a63      	ldr	r2, [pc, #396]	@ (8000564 <GpioPinSet+0x1d4>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6313      	str	r3, [r2, #48]	@ 0x30
 80003dc:	e01f      	b.n	800041e <GpioPinSet+0x8e>

	} else if (data.port == GPIOD) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a63      	ldr	r2, [pc, #396]	@ (8000570 <GpioPinSet+0x1e0>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GpioPinSet+0x64>

		GPIODEN;
 80003e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000564 <GpioPinSet+0x1d4>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ea:	4a5e      	ldr	r2, [pc, #376]	@ (8000564 <GpioPinSet+0x1d4>)
 80003ec:	f043 0308 	orr.w	r3, r3, #8
 80003f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003f2:	e014      	b.n	800041e <GpioPinSet+0x8e>

	} else if (data.port == GPIOE) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a5f      	ldr	r2, [pc, #380]	@ (8000574 <GpioPinSet+0x1e4>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GpioPinSet+0x7a>

		GPIOEEN;
 80003fc:	4b59      	ldr	r3, [pc, #356]	@ (8000564 <GpioPinSet+0x1d4>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000400:	4a58      	ldr	r2, [pc, #352]	@ (8000564 <GpioPinSet+0x1d4>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
 8000408:	e009      	b.n	800041e <GpioPinSet+0x8e>

	} else if (data.port == GPIOF) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a5a      	ldr	r2, [pc, #360]	@ (8000578 <GpioPinSet+0x1e8>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d105      	bne.n	800041e <GpioPinSet+0x8e>

		GPIOFEN;
 8000412:	4b54      	ldr	r3, [pc, #336]	@ (8000564 <GpioPinSet+0x1d4>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000416:	4a53      	ldr	r2, [pc, #332]	@ (8000564 <GpioPinSet+0x1d4>)
 8000418:	f043 0320 	orr.w	r3, r3, #32
 800041c:	6313      	str	r3, [r2, #48]	@ 0x30
	}


	data.port->MODER &= ~(3 << (data.pin * 2));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	7a3b      	ldrb	r3, [r7, #8]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	2103      	movs	r1, #3
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
	data.port->MODER |= (data.mode << (data.pin * 2));
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	7a7b      	ldrb	r3, [r7, #9]
 800043c:	4619      	mov	r1, r3
 800043e:	7a3b      	ldrb	r3, [r7, #8]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	430a      	orrs	r2, r1
 800044c:	601a      	str	r2, [r3, #0]

	data.port->OTYPER &= ~(1 << data.pin);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685a      	ldr	r2, [r3, #4]
 8000452:	7a3b      	ldrb	r3, [r7, #8]
 8000454:	4619      	mov	r1, r3
 8000456:	2301      	movs	r3, #1
 8000458:	408b      	lsls	r3, r1
 800045a:	43db      	mvns	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	400a      	ands	r2, r1
 8000462:	605a      	str	r2, [r3, #4]
	data.port->OTYPER |= (data.output_type << data.pin);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	7abb      	ldrb	r3, [r7, #10]
 800046a:	4619      	mov	r1, r3
 800046c:	7a3b      	ldrb	r3, [r7, #8]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	430a      	orrs	r2, r1
 8000478:	605a      	str	r2, [r3, #4]

	data.port->PUPDR &= ~(3 << (data.pin * 2));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	7a3b      	ldrb	r3, [r7, #8]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	400a      	ands	r2, r1
 8000490:	60da      	str	r2, [r3, #12]
	data.port->PUPDR |= (data.pull_up_down << (data.pin * 2));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	68da      	ldr	r2, [r3, #12]
 8000496:	7b3b      	ldrb	r3, [r7, #12]
 8000498:	4619      	mov	r1, r3
 800049a:	7a3b      	ldrb	r3, [r7, #8]
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	4619      	mov	r1, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	60da      	str	r2, [r3, #12]

	data.port->OSPEEDR &= ~(3 << (data.pin * 2));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	7a3b      	ldrb	r3, [r7, #8]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	2103      	movs	r1, #3
 80004b4:	fa01 f303 	lsl.w	r3, r1, r3
 80004b8:	43db      	mvns	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	400a      	ands	r2, r1
 80004c0:	609a      	str	r2, [r3, #8]
	data.port->OSPEEDR |= (data.ouput_speed << (data.pin * 2));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	689a      	ldr	r2, [r3, #8]
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	4619      	mov	r1, r3
 80004ca:	7a3b      	ldrb	r3, [r7, #8]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	609a      	str	r2, [r3, #8]


	if(data.mode == SET_PIN_ALTERNATIVE)  {
 80004da:	7a7b      	ldrb	r3, [r7, #9]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d138      	bne.n	8000552 <GpioPinSet+0x1c2>

		if (data.Afmode < 8) {
 80004e0:	7bbb      	ldrb	r3, [r7, #14]
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d818      	bhi.n	8000518 <GpioPinSet+0x188>
			data.port->AFRL &= ~(0xF << (data.pin * 4));
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6a1a      	ldr	r2, [r3, #32]
 80004ea:	7a3b      	ldrb	r3, [r7, #8]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	210f      	movs	r1, #15
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	400a      	ands	r2, r1
 80004fc:	621a      	str	r2, [r3, #32]
			data.port->AFRL |=  (data.Afmode << (data.pin * 4) );
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6a1a      	ldr	r2, [r3, #32]
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	4619      	mov	r1, r3
 8000506:	7a3b      	ldrb	r3, [r7, #8]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	fa01 f303 	lsl.w	r3, r1, r3
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	430a      	orrs	r2, r1
 8000514:	621a      	str	r2, [r3, #32]
 8000516:	e01c      	b.n	8000552 <GpioPinSet+0x1c2>
		} else if ( data.Afmode < 16 ) {
 8000518:	7bbb      	ldrb	r3, [r7, #14]
 800051a:	2b0f      	cmp	r3, #15
 800051c:	d819      	bhi.n	8000552 <GpioPinSet+0x1c2>
			data.port->AFRH &= ~(0xF << ((data.pin - 8) * 4)  );
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000522:	7a3b      	ldrb	r3, [r7, #8]
 8000524:	3b08      	subs	r3, #8
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	210f      	movs	r1, #15
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	400a      	ands	r2, r1
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
			data.port->AFRH |=  (data.Afmode << ((data.pin - 8)*4) );
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	4619      	mov	r1, r3
 8000540:	7a3b      	ldrb	r3, [r7, #8]
 8000542:	3b08      	subs	r3, #8
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	430a      	orrs	r2, r1
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
	else if(data.mode == SET_PIN_ANALOG) {


	}

	return SUCCESS;
 8000552:	2300      	movs	r3, #0

}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40020000 	.word	0x40020000
 8000564:	40023800 	.word	0x40023800
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400

0800057c <I2C_Init>:

#include "i2c.h"
#include "timer.h"

void I2C_Init(i2c_handler_t i2cHandle) {
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if(i2cHandle.I2C_Base == I2C1) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a2c      	ldr	r2, [pc, #176]	@ (800063c <I2C_Init+0xc0>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d106      	bne.n	800059e <I2C_Init+0x22>
		RCC->APB1ENR |= (1 << 21);
 8000590:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <I2C_Init+0xc4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a2a      	ldr	r2, [pc, #168]	@ (8000640 <I2C_Init+0xc4>)
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	e014      	b.n	80005c8 <I2C_Init+0x4c>
	}else if(i2cHandle.I2C_Base == I2C2){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a28      	ldr	r2, [pc, #160]	@ (8000644 <I2C_Init+0xc8>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d106      	bne.n	80005b4 <I2C_Init+0x38>
		RCC->APB1ENR |= (1 << 22);
 80005a6:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <I2C_Init+0xc4>)
 80005a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005aa:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <I2C_Init+0xc4>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b2:	e009      	b.n	80005c8 <I2C_Init+0x4c>
	}else if(i2cHandle.I2C_Base == I2C3) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a24      	ldr	r2, [pc, #144]	@ (8000648 <I2C_Init+0xcc>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d139      	bne.n	8000630 <I2C_Init+0xb4>
		RCC->APB1ENR |= (1 << 23);
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <I2C_Init+0xc4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000640 <I2C_Init+0xc4>)
 80005c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
	}else {
		return;
	}

	i2cHandle.I2C_Base->I2C_CR1 |= (1 << 15);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80005d2:	601a      	str	r2, [r3, #0]
	i2cHandle.I2C_Base->I2C_CR1 &= ~(1 << 15);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80005de:	601a      	str	r2, [r3, #0]

	i2cHandle.I2C_Base->I2C_CR1 &= ~(1 << 1);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f022 0202 	bic.w	r2, r2, #2
 80005ea:	601a      	str	r2, [r3, #0]

	i2cHandle.I2C_Base->I2C_CR2 |= i2cHandle.APB_PripheralFreq; //16
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	7a7b      	ldrb	r3, [r7, #9]
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]

	i2cHandle.I2C_Base->I2C_OAR1 |= (1 << 14);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000604:	609a      	str	r2, [r3, #8]

	i2cHandle.I2C_Base->I2C_CCR |= i2cHandle.I2C_CCRValue;//0x50
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	430a      	orrs	r2, r1
 8000612:	61da      	str	r2, [r3, #28]

	i2cHandle.I2C_Base->I2C_TRISE |= i2cHandle.I2C_TRISEValue;//17
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a1a      	ldr	r2, [r3, #32]
 8000618:	7b3b      	ldrb	r3, [r7, #12]
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	430a      	orrs	r2, r1
 8000620:	621a      	str	r2, [r3, #32]

	i2cHandle.I2C_Base->I2C_CR1 |= (1 << 0);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f042 0201 	orr.w	r2, r2, #1
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	e000      	b.n	8000632 <I2C_Init+0xb6>
		return;
 8000630:	bf00      	nop
}
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40005400 	.word	0x40005400
 8000640:	40023800 	.word	0x40023800
 8000644:	40005800 	.word	0x40005800
 8000648:	40005c00 	.word	0x40005c00

0800064c <I2C_Write>:

void I2C_Write(i2c_register_t *Base, uint8_t Data) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
	while(! (Base->I2C_SR1 & (1 << 7)) );
 8000658:	bf00      	nop
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f9      	beq.n	800065a <I2C_Write+0xe>
	Base->I2C_DR = Data;
 8000666:	78fa      	ldrb	r2, [r7, #3]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	611a      	str	r2, [r3, #16]
	while(! (Base->I2C_SR1 & (1 << 7)) );
 800066c:	bf00      	nop
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <I2C_Write+0x22>
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <I2C_Start>:
	return 0;
}
uint8_t I2C_ReadContinoues(i2c_register_t *Base, uint8_t Address, uint8_t *Data){
	return 0;
}
uint8_t I2C_Start(i2c_register_t *Base, uint8_t slaveAddr) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]

	uint32_t status_read;
	if((Base->I2C_SR2) & (1 << 1)) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <I2C_Start+0x1c>
		return I2C_BUS_BUSY;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e020      	b.n	80006e6 <I2C_Start+0x5e>
	}

	Base->I2C_CR1 |= (1 << 10);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
	Base->I2C_CR1 |= (1 << 8);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	601a      	str	r2, [r3, #0]

	while(!((Base->I2C_SR1) & (1 << 0)));
 80006bc:	bf00      	nop
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <I2C_Start+0x36>

	Base->I2C_DR = (slaveAddr << 1);
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	005a      	lsls	r2, r3, #1
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	611a      	str	r2, [r3, #16]

	MilliSecondsDelay(100);
 80006d2:	2064      	movs	r0, #100	@ 0x64
 80006d4:	f000 f900 	bl	80008d8 <MilliSecondsDelay>

	//while(!( Base->I2C_SR1 & 0x00000002) );


	status_read = ((Base->I2C_SR1)| (Base->I2C_SR2));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	695a      	ldr	r2, [r3, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]

	return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <I2C_Stop>:

uint8_t I2C_Stop(i2c_register_t *Base) {
 80006ee:	b480      	push	{r7}
 80006f0:	b083      	sub	sp, #12
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]

//	while(  ((Base->I2C_SR2) & (1 << 1)) );

	Base->I2C_CR1 |= (1 << 9);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]

	while(  ((Base->I2C_SR2) & (1 << 1)) );
 8000702:	bf00      	nop
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0302 	and.w	r3, r3, #2
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1f9      	bne.n	8000704 <I2C_Stop+0x16>

	return 0;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <NvicEnableInt>:
 */

#include <mcu.h>
#include <interrupt.h>

uint8_t NvicEnableInt(uint8_t IntNumber) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]

	if( (IntNumber >=0) && (IntNumber < 32) ) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b1f      	cmp	r3, #31
 800072e:	d80a      	bhi.n	8000746 <NvicEnableInt+0x26>
		(*NVIC_ISER0) |= (1 << IntNumber);
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <NvicEnableInt+0x80>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a18      	ldr	r2, [pc, #96]	@ (80007a0 <NvicEnableInt+0x80>)
 8000740:	430b      	orrs	r3, r1
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e024      	b.n	8000790 <NvicEnableInt+0x70>
	}
	else if( (IntNumber >= 32) && (IntNumber < 64) ) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	d90f      	bls.n	800076c <NvicEnableInt+0x4c>
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000750:	d80c      	bhi.n	800076c <NvicEnableInt+0x4c>
		(*NVIC_ISER1) |= (1 << (IntNumber%32));
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <NvicEnableInt+0x84>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	f002 021f 	and.w	r2, r2, #31
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <NvicEnableInt+0x84>)
 8000766:	430b      	orrs	r3, r1
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	e011      	b.n	8000790 <NvicEnableInt+0x70>
	}else if( (IntNumber >= 64) && (IntNumber < 81) ) {
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000770:	d90e      	bls.n	8000790 <NvicEnableInt+0x70>
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b50      	cmp	r3, #80	@ 0x50
 8000776:	d80b      	bhi.n	8000790 <NvicEnableInt+0x70>
		(*NVIC_ISER2) |= (1 << (IntNumber%64));
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <NvicEnableInt+0x88>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	79fa      	ldrb	r2, [r7, #7]
 800077e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <NvicEnableInt+0x88>)
 800078c:	430b      	orrs	r3, r1
 800078e:	6013      	str	r3, [r2, #0]
	}

	return SUCCESS;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100
 80007a4:	e000e104 	.word	0xe000e104
 80007a8:	e000e108 	.word	0xe000e108

080007ac <GetSystemClockFrequency>:
#define LSE_CLOCK 32000000UL
#define __FPU_PRESENT 1
#define __FPU_USED 1


uint32_t GetSystemClockFrequency(uint8_t _SystemBus) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]


    uint8_t ui8_LocalClockSource = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

    // Extract bits 3:2 (SWS) and right-align
    ui8_LocalClockSource = (RCC->CFGR >> 2) & 0x3;
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <GetSystemClockFrequency+0x44>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0303 	and.w	r3, r3, #3
 80007c6:	73fb      	strb	r3, [r7, #15]

    switch (ui8_LocalClockSource)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d005      	beq.n	80007da <GetSystemClockFrequency+0x2e>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	db07      	blt.n	80007e2 <GetSystemClockFrequency+0x36>
 80007d2:	3b01      	subs	r3, #1
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d804      	bhi.n	80007e2 <GetSystemClockFrequency+0x36>
 80007d8:	e001      	b.n	80007de <GetSystemClockFrequency+0x32>
    {
        case 0:
            return HSI_CLOCK;  // Internal 16 MHz
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <GetSystemClockFrequency+0x48>)
 80007dc:	e002      	b.n	80007e4 <GetSystemClockFrequency+0x38>
        case 1:
            //return HSE_CLOCK;  // External crystal (e.g. 8 MHz)
        case 2:
            return PLL_CLOCK;  // Usually 168 MHz for STM32F407
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <GetSystemClockFrequency+0x4c>)
 80007e0:	e000      	b.n	80007e4 <GetSystemClockFrequency+0x38>
        default:
            return 0; // Unknown
 80007e2:	2300      	movs	r3, #0
    }

}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800
 80007f4:	00f42400 	.word	0x00f42400
 80007f8:	0aba9500 	.word	0x0aba9500

080007fc <SystemInit>:
    return (system_clock / ahb_prescaler) / apb1_prescaler;
}


void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
    #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        (*CPACR) |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <SystemInit+0x1c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <SystemInit+0x1c>)
 8000806:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080a:	6013      	str	r3, [r2, #0]
    #endif
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed88 	.word	0xe000ed88

0800081c <TIM1_BRK_TIM9_IRQHandler>:


uint32_t g_timeOutFlag = 0;


void TIM1_BRK_TIM9_IRQHandler (void) {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

	if( TIMER9->TIM_SR & 1)
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	f003 0301 	and.w	r3, r3, #1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <TIM1_BRK_TIM9_IRQHandler+0x22>
	{
		TIMER9->TIM_SR &= ~(1 << 0);
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 800082e:	691b      	ldr	r3, [r3, #16]
 8000830:	4a05      	ldr	r2, [pc, #20]	@ (8000848 <TIM1_BRK_TIM9_IRQHandler+0x2c>)
 8000832:	f023 0301 	bic.w	r3, r3, #1
 8000836:	6113      	str	r3, [r2, #16]
		g_timeOutFlag = 1;
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <TIM1_BRK_TIM9_IRQHandler+0x30>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
	}

}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40014000 	.word	0x40014000
 800084c:	2000007c 	.word	0x2000007c

08000850 <TimerInit>:

void TimerInit(tmr_9_register_t *Timer) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= (1 << 16);
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <TimerInit+0x24>)
 800085a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085c:	4a05      	ldr	r2, [pc, #20]	@ (8000874 <TimerInit+0x24>)
 800085e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000862:	6453      	str	r3, [r2, #68]	@ 0x44
//	Timer->TIM_PSC = 83;
//	Timer->TIM_CNT = 0;
//	Timer->TIM_ARR = 0;

	NvicEnableInt(24);
 8000864:	2018      	movs	r0, #24
 8000866:	f7ff ff5b 	bl	8000720 <NvicEnableInt>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <TimerEnable>:


void TimerEnable(tmr_9_register_t *Timer, uint32_t PreLoad) {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]

	Timer->TIM_PSC = 15;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	220f      	movs	r2, #15
 8000886:	629a      	str	r2, [r3, #40]	@ 0x28
	Timer->TIM_CNT = 0;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
	Timer->TIM_ARR = PreLoad;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
	Timer->TIM_DIER |= (1 << 0);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	f043 0201 	orr.w	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60da      	str	r2, [r3, #12]
	Timer->TIM_CR1 |= (1 << 7) | (1 << 0);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f043 0281 	orr.w	r2, r3, #129	@ 0x81
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <TimerDisable>:


}


void TimerDisable(tmr_9_register_t *Timer) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

	Timer->TIM_CR1 &= ~(1 << 0);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f023 0201 	bic.w	r2, r3, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <MilliSecondsDelay>:

void TimerLoadValue(uint32_t ui32Base) {


}
void MilliSecondsDelay(uint32_t delay) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	while(delay) {
 80008e0:	e006      	b.n	80008f0 <MilliSecondsDelay+0x18>
	MicroSecondsDelay(1000);
 80008e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e6:	f000 f80b 	bl	8000900 <MicroSecondsDelay>
	delay--;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
	while(delay) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f5      	bne.n	80008e2 <MilliSecondsDelay+0xa>
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MicroSecondsDelay>:

void MicroSecondsDelay(uint32_t delay) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	uint32_t ui32LocalLoadValue = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	uint32_t ui32LocalRemining = delay;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	60bb      	str	r3, [r7, #8]
	while(ui32LocalRemining > 0 )
 8000910:	e01e      	b.n	8000950 <MicroSecondsDelay+0x50>
	{

		if( ui32LocalRemining > 65536) {
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000918:	d907      	bls.n	800092a <MicroSecondsDelay+0x2a>
			ui32LocalLoadValue = 65536;
 800091a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800091e:	60fb      	str	r3, [r7, #12]
			ui32LocalRemining -= 65536;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	e003      	b.n	8000932 <MicroSecondsDelay+0x32>
		} else {
			ui32LocalLoadValue = ui32LocalRemining;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	60fb      	str	r3, [r7, #12]
			ui32LocalRemining = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
		}

		g_timeOutFlag = 0;
 8000932:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MicroSecondsDelay+0x60>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		TimerEnable(TIMER9,ui32LocalLoadValue);
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <MicroSecondsDelay+0x64>)
 800093c:	f7ff ff9c 	bl	8000878 <TimerEnable>
		while(!g_timeOutFlag);
 8000940:	bf00      	nop
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MicroSecondsDelay+0x60>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0fb      	beq.n	8000942 <MicroSecondsDelay+0x42>
		TimerDisable(TIMER9);
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <MicroSecondsDelay+0x64>)
 800094c:	f7ff ffb4 	bl	80008b8 <TimerDisable>
	while(ui32LocalRemining > 0 )
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1dd      	bne.n	8000912 <MicroSecondsDelay+0x12>
	}

}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000007c 	.word	0x2000007c
 8000964:	40014000 	.word	0x40014000

08000968 <uartInit>:
 */


#include "uart.h"

usartReturnStatus_t uartInit(usartHandle_t *uartData) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

	if ( uartPheripheralEnable((uint32_t *)uartData->usartBase) == USART_PHERIPHERAL_NOT_ENABLED) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f84f 	bl	8000a18 <uartPheripheralEnable>
 800097a:	4603      	mov	r3, r0
 800097c:	2b04      	cmp	r3, #4
 800097e:	d101      	bne.n	8000984 <uartInit+0x1c>
		return USART_INIT_FAILED;
 8000980:	2301      	movs	r3, #1
 8000982:	e042      	b.n	8000a0a <uartInit+0xa2>
	}




	uartCalculateBaurdRate(uartData);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 f8c8 	bl	8000b1a <uartCalculateBaurdRate>
	uartData->usartBase->CR1 &= ~(1 << 15);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000998:	60da      	str	r2, [r3, #12]
	uartData->usartBase->CR1 |= (uartData->overSampling << 15);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68d9      	ldr	r1, [r3, #12]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7a5b      	ldrb	r3, [r3, #9]
 80009a4:	03da      	lsls	r2, r3, #15
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	60da      	str	r2, [r3, #12]
	/*Uart WordLength set*/


	uartData->usartBase->CR1 &= ~(1 << 12);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68da      	ldr	r2, [r3, #12]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009bc:	60da      	str	r2, [r3, #12]
	uartData->usartBase->CR1 |= (uartData->wordLength << 12);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68d9      	ldr	r1, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b5b      	ldrb	r3, [r3, #13]
 80009c8:	031a      	lsls	r2, r3, #12
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	60da      	str	r2, [r3, #12]

	uartData->usartBase->CR1 |= (1 << 3);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0208 	orr.w	r2, r2, #8
 80009e0:	60da      	str	r2, [r3, #12]
	/*Uart Receiver Enable */
	uartData->usartBase->CR1 &= ~(1 << 2);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0204 	bic.w	r2, r2, #4
 80009f0:	60da      	str	r2, [r3, #12]
	uartData->usartBase->CR1 |= (1 << 2);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0204 	orr.w	r2, r2, #4
 8000a00:	60da      	str	r2, [r3, #12]
	/*Uart Oversampling Set*/


	usartEnable(UART4);
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <uartInit+0xac>)
 8000a04:	f000 f972 	bl	8000cec <usartEnable>


	return USART_INIT_SUCCESSFULLY;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004c00 	.word	0x40004c00

08000a18 <uartPheripheralEnable>:
uint8_t uartReceiveChar(usart_register_t *_Base) {
	while(! ( (_Base->SR) & (1 << 5) ));
	return (_Base->DR);
}

uint8_t uartPheripheralEnable(uint32_t  *Base) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if( Base == (uint32_t *)USART1 )	{ 	return (enableSysPheripheral(&(RCC->APB2ENR), ENABLE_USART1)); 	}
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a20      	ldr	r2, [pc, #128]	@ (8000aa4 <uartPheripheralEnable+0x8c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d105      	bne.n	8000a34 <uartPheripheralEnable+0x1c>
 8000a28:	2104      	movs	r1, #4
 8000a2a:	481f      	ldr	r0, [pc, #124]	@ (8000aa8 <uartPheripheralEnable+0x90>)
 8000a2c:	f000 f84a 	bl	8000ac4 <enableSysPheripheral>
 8000a30:	4603      	mov	r3, r0
 8000a32:	e032      	b.n	8000a9a <uartPheripheralEnable+0x82>
	else if( Base == (uint32_t *)USART2){ 	return (enableSysPheripheral(&(RCC->APB1ENR), ENABLE_USART2));	}
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <uartPheripheralEnable+0x94>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d105      	bne.n	8000a48 <uartPheripheralEnable+0x30>
 8000a3c:	2111      	movs	r1, #17
 8000a3e:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <uartPheripheralEnable+0x98>)
 8000a40:	f000 f840 	bl	8000ac4 <enableSysPheripheral>
 8000a44:	4603      	mov	r3, r0
 8000a46:	e028      	b.n	8000a9a <uartPheripheralEnable+0x82>
	else if( Base == (uint32_t *)USART3){	return (enableSysPheripheral(&(RCC->APB1ENR), ENABLE_USART3));	}
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab4 <uartPheripheralEnable+0x9c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d105      	bne.n	8000a5c <uartPheripheralEnable+0x44>
 8000a50:	2112      	movs	r1, #18
 8000a52:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <uartPheripheralEnable+0x98>)
 8000a54:	f000 f836 	bl	8000ac4 <enableSysPheripheral>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	e01e      	b.n	8000a9a <uartPheripheralEnable+0x82>
	else if( Base == (uint32_t *)UART4)	{	return (enableSysPheripheral(&(RCC->APB1ENR), ENABLE_UART4));	}
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <uartPheripheralEnable+0xa0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d105      	bne.n	8000a70 <uartPheripheralEnable+0x58>
 8000a64:	2113      	movs	r1, #19
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <uartPheripheralEnable+0x98>)
 8000a68:	f000 f82c 	bl	8000ac4 <enableSysPheripheral>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	e014      	b.n	8000a9a <uartPheripheralEnable+0x82>
	else if( Base == (uint32_t *)UART5)	{	return (enableSysPheripheral(&(RCC->APB1ENR), ENABLE_UART5));	}
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a12      	ldr	r2, [pc, #72]	@ (8000abc <uartPheripheralEnable+0xa4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d105      	bne.n	8000a84 <uartPheripheralEnable+0x6c>
 8000a78:	2114      	movs	r1, #20
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <uartPheripheralEnable+0x98>)
 8000a7c:	f000 f822 	bl	8000ac4 <enableSysPheripheral>
 8000a80:	4603      	mov	r3, r0
 8000a82:	e00a      	b.n	8000a9a <uartPheripheralEnable+0x82>
	else if( Base == (uint32_t *)USART6){	return (enableSysPheripheral(&(RCC->APB2ENR), ENABLE_USART6)); 	}
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac0 <uartPheripheralEnable+0xa8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d105      	bne.n	8000a98 <uartPheripheralEnable+0x80>
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <uartPheripheralEnable+0x90>)
 8000a90:	f000 f818 	bl	8000ac4 <enableSysPheripheral>
 8000a94:	4603      	mov	r3, r0
 8000a96:	e000      	b.n	8000a9a <uartPheripheralEnable+0x82>
	return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40023844 	.word	0x40023844
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023840 	.word	0x40023840
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	40004c00 	.word	0x40004c00
 8000abc:	40005000 	.word	0x40005000
 8000ac0:	40011400 	.word	0x40011400

08000ac4 <enableSysPheripheral>:

usartReturnStatus_t enableSysPheripheral(volatile uint32_t *_Base, uint16_t Pos) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]

	*(_Base) &= ~(1 << Pos);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	887a      	ldrh	r2, [r7, #2]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	401a      	ands	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
	*(_Base) |= (1 << Pos);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	887a      	ldrh	r2, [r7, #2]
 8000aea:	2101      	movs	r1, #1
 8000aec:	fa01 f202 	lsl.w	r2, r1, r2
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]

	if( (*(_Base)) & (1 << Pos)) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <enableSysPheripheral+0x48>
		return USART_PHERIPHERAL_ENABLED;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <enableSysPheripheral+0x4a>
	} else {
		return USART_PHERIPHERAL_NOT_ENABLED;
 8000b0c:	2304      	movs	r3, #4
	}
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <uartCalculateBaurdRate>:



void uartCalculateBaurdRate(usartHandle_t *uartData) {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]

	uint16_t Mantissa = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
	uint8_t Fraction = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	75fb      	strb	r3, [r7, #23]
	uint32_t clockFrequency = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
	 float usartdiv = 0.0;
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]

	clockFrequency = GetSystemClockFrequency(APB1_SYSTEMBUS);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fe39 	bl	80007ac <GetSystemClockFrequency>
 8000b3a:	60b8      	str	r0, [r7, #8]

	if (uartData->overSampling == 1) // OVER8 = 1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d113      	bne.n	8000b6c <uartCalculateBaurdRate+0x52>
	{
	    usartdiv = (float)clockFrequency / (8.0f * (float)uartData->baudRate);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	ee07 3a90 	vmov	s15, r3
 8000b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b5a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b66:	edc7 7a04 	vstr	s15, [r7, #16]
 8000b6a:	e012      	b.n	8000b92 <uartCalculateBaurdRate+0x78>
	}
	else // OVER8 = 0
	{
	    usartdiv = (float)clockFrequency / (16.0f * (float)uartData->baudRate);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b82:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000b86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8e:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	Mantissa = (uint16_t)usartdiv;
 8000b92:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b9a:	ee17 3a90 	vmov	r3, s15
 8000b9e:	81fb      	strh	r3, [r7, #14]


	Fraction = (uint8_t)( (usartdiv - (float)Mantissa) * (uartData->overSampling?(float)8.0:(float)16.0) + (float)0.5);
 8000ba0:	89fb      	ldrh	r3, [r7, #14]
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000baa:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7a5b      	ldrb	r3, [r3, #9]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <uartCalculateBaurdRate+0xa6>
 8000bba:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000bbe:	e001      	b.n	8000bc4 <uartCalculateBaurdRate+0xaa>
 8000bc0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd4:	edc7 7a00 	vstr	s15, [r7]
 8000bd8:	783b      	ldrb	r3, [r7, #0]
 8000bda:	75fb      	strb	r3, [r7, #23]

	if (uartData->overSampling == 1) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7a5b      	ldrb	r3, [r3, #9]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d104      	bne.n	8000bee <uartCalculateBaurdRate+0xd4>
	    Fraction &= 0x07; // Keep only 3 bits (bit 3 must be 0)
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	75fb      	strb	r3, [r7, #23]
 8000bec:	e003      	b.n	8000bf6 <uartCalculateBaurdRate+0xdc>
	} else {
	    Fraction &= 0x0F; // Keep all 4 bits
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	75fb      	strb	r3, [r7, #23]
	}

	uartData->usartBase->BRR = (Mantissa << 4) | Fraction;
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	011a      	lsls	r2, r3, #4
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	431a      	orrs	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	609a      	str	r2, [r3, #8]
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <uartInterruptEnable>:

usartReturnStatus_t uartInterruptEnable(usart_register_t *Base,uint32_t InterruptType) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
//
//	if (!(Base->CR1 & (1 << 8))) {
//		return USART_INTERRUPT_NOT_ENABLED;
//	}

	if (InterruptType == TX_INTERRUPT) {
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d115      	bne.n	8000c48 <uartInterruptEnable+0x3c>
		Base->CR1 &= ~(1 << 7);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60da      	str	r2, [r3, #12]
		Base->CR1 |= (1 << 7);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]

		if (!(Base->CR1 & (1 << 7))) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <uartInterruptEnable+0x38>
			return USART_TX_INTERRUPT_NOT_ENABLED;
 8000c40:	230b      	movs	r3, #11
 8000c42:	e01b      	b.n	8000c7c <uartInterruptEnable+0x70>
		} else {
			return USART_TX_INTERRUPT_ENABLED;
 8000c44:	230a      	movs	r3, #10
 8000c46:	e019      	b.n	8000c7c <uartInterruptEnable+0x70>
		}

	} else if (InterruptType == RX_INTERRUPT) {
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	2b09      	cmp	r3, #9
 8000c4c:	d115      	bne.n	8000c7a <uartInterruptEnable+0x6e>
		Base->CR1 &= ~(1 << 5);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f023 0220 	bic.w	r2, r3, #32
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60da      	str	r2, [r3, #12]
		Base->CR1 |= (1 << 5);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	f043 0220 	orr.w	r2, r3, #32
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60da      	str	r2, [r3, #12]
		if (!(Base->CR1 & (1 << 5))) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <uartInterruptEnable+0x6a>
			return USART_RX_INTERRUPT_NOT_ENABLED;
 8000c72:	230f      	movs	r3, #15
 8000c74:	e002      	b.n	8000c7c <uartInterruptEnable+0x70>
		} else {
			return USART_RX_INTERRUPT_ENABLED;
 8000c76:	230e      	movs	r3, #14
 8000c78:	e000      	b.n	8000c7c <uartInterruptEnable+0x70>
		}
	}

	return USART_INTERRUPT_NOT_ENABLED;
 8000c7a:	2308      	movs	r3, #8
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <uartInterruptDisable>:


usartReturnStatus_t uartInterruptDisable(usart_register_t *Base,uint32_t InterruptType) {
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]

	if (InterruptType == TX_INTERRUPT) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d10f      	bne.n	8000cb8 <uartInterruptDisable+0x30>
		Base->CR1 &= ~(1 << 7);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	60da      	str	r2, [r3, #12]

		if (!(Base->CR1 & (1 << 7))) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <uartInterruptDisable+0x2c>
			return USART_TX_INTERRUPT_DISABLED;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	e015      	b.n	8000ce0 <uartInterruptDisable+0x58>
		} else {
			return USART_TX_INTERRUPT_NOT_DISABLED;
 8000cb4:	230d      	movs	r3, #13
 8000cb6:	e013      	b.n	8000ce0 <uartInterruptDisable+0x58>
		}

	} else if (InterruptType == RX_INTERRUPT) {
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	2b09      	cmp	r3, #9
 8000cbc:	d10f      	bne.n	8000cde <uartInterruptDisable+0x56>
		Base->CR1 &= ~(1 << 5);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	f023 0220 	bic.w	r2, r3, #32
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60da      	str	r2, [r3, #12]
		if (!(Base->CR1 & (1 << 5))) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <uartInterruptDisable+0x52>
			return USART_RX_INTERRUPT_DISABLED;
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	e002      	b.n	8000ce0 <uartInterruptDisable+0x58>
		} else {
			return USART_RX_INTERRUPT_NOT_DISABLED;
 8000cda:	2311      	movs	r3, #17
 8000cdc:	e000      	b.n	8000ce0 <uartInterruptDisable+0x58>
		}
	}
	return USART_INTERRUPT_NOT_DISABLED;
 8000cde:	2309      	movs	r3, #9
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <usartEnable>:


uint8_t usartEnable(usart_register_t *_Base) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

	_Base->CR1 &= ~(1 << 13);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	60da      	str	r2, [r3, #12]
	_Base->CR1 |= (1 << 13);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]

	if (!(_Base->CR1) && (1 << 13)) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <usartEnable+0x2c>
		return 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	e000      	b.n	8000d1a <usartEnable+0x2e>
	} else {
		return 1;
 8000d18:	2301      	movs	r3, #1
	}
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <ioExpanderPinInit>:
#include <ioExpander.h>




void ioExpanderPinInit(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
	gpio_handler_t sda,scl;

	sda.port = GPIOB;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <ioExpanderPinInit+0x5c>)
 8000d30:	60fb      	str	r3, [r7, #12]
	sda.pin = 7;
 8000d32:	2307      	movs	r3, #7
 8000d34:	743b      	strb	r3, [r7, #16]
	sda.Afmode = SET_PIN_AF4;
 8000d36:	2304      	movs	r3, #4
 8000d38:	75bb      	strb	r3, [r7, #22]
	sda.pull_up_down = SET_PIN_PULLUP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	753b      	strb	r3, [r7, #20]
	sda.mode = SET_PIN_ALTERNATIVE;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	747b      	strb	r3, [r7, #17]
	sda.output_type = SET_PIN_OPEN_DRAIN;
 8000d42:	2301      	movs	r3, #1
 8000d44:	74bb      	strb	r3, [r7, #18]
	sda.ouput_speed = SET_PIN_HSPEED;
 8000d46:	2302      	movs	r3, #2
 8000d48:	74fb      	strb	r3, [r7, #19]

	scl.port = GPIOB;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <ioExpanderPinInit+0x5c>)
 8000d4c:	603b      	str	r3, [r7, #0]
	scl.pin = 6;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	713b      	strb	r3, [r7, #4]
	scl.Afmode = SET_PIN_AF4;
 8000d52:	2304      	movs	r3, #4
 8000d54:	72bb      	strb	r3, [r7, #10]
	scl.pull_up_down = SET_PIN_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	723b      	strb	r3, [r7, #8]
	scl.mode = SET_PIN_ALTERNATIVE;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	717b      	strb	r3, [r7, #5]
	scl.output_type = SET_PIN_OPEN_DRAIN;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	71bb      	strb	r3, [r7, #6]
	scl.ouput_speed = SET_PIN_HSPEED;
 8000d62:	2302      	movs	r3, #2
 8000d64:	71fb      	strb	r3, [r7, #7]

	GpioPinSet(sda);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d6e:	f7ff fb0f 	bl	8000390 <GpioPinSet>
	GpioPinSet(scl);
 8000d72:	463b      	mov	r3, r7
 8000d74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d78:	f7ff fb0a 	bl	8000390 <GpioPinSet>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020400 	.word	0x40020400

08000d88 <ioExpanderwrite>:



void ioExpanderwrite(i2c_register_t *const i2c_Base,uint8_t slaveAddr, uint8_t w_reg, uint8_t w_data) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	70fb      	strb	r3, [r7, #3]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	70bb      	strb	r3, [r7, #2]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	707b      	strb	r3, [r7, #1]
	I2C_Start(i2c_Base,slaveAddr);
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	4619      	mov	r1, r3
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fc6e 	bl	8000688 <I2C_Start>
	I2C_Write(i2c_Base,w_reg);
 8000dac:	78bb      	ldrb	r3, [r7, #2]
 8000dae:	4619      	mov	r1, r3
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fc4b 	bl	800064c <I2C_Write>
	I2C_Write(i2c_Base,w_data);
 8000db6:	787b      	ldrb	r3, [r7, #1]
 8000db8:	4619      	mov	r1, r3
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fc46 	bl	800064c <I2C_Write>
	I2C_Stop(i2c_Base);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fc94 	bl	80006ee <I2C_Stop>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <ioExpanderInit>:


void ioExpanderInit(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
	ioExpanderPinInit();
 8000dd6:	f7ff ffa7 	bl	8000d28 <ioExpanderPinInit>

	i2c_handler_t i2c;

	i2c.I2C_Base = I2C1;
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <ioExpanderInit+0x30>)
 8000ddc:	607b      	str	r3, [r7, #4]
	i2c.I2C_Mode =I2C_SM_MODE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	723b      	strb	r3, [r7, #8]
	i2c.APB_PripheralFreq = 16;
 8000de2:	2310      	movs	r3, #16
 8000de4:	727b      	strb	r3, [r7, #9]
	i2c.I2C_CCRValue = 0x50;
 8000de6:	2350      	movs	r3, #80	@ 0x50
 8000de8:	72fb      	strb	r3, [r7, #11]
	i2c.I2C_TRISEValue = 17;
 8000dea:	2311      	movs	r3, #17
 8000dec:	733b      	strb	r3, [r7, #12]

	I2C_Init(i2c);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df4:	f7ff fbc2 	bl	800057c <I2C_Init>

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40005400 	.word	0x40005400

08000e04 <update_Data_From_Appllication>:



uartSerialInputStatus_t status = {RX_IDLE,0};

void update_Data_From_Appllication(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	int32_t pinNumber = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
	uint8_t validPort = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
	if (status.data_read_status == RX_DATA_READY_TO_READ) {
 8000e12:	4bbb      	ldr	r3, [pc, #748]	@ (8001100 <update_Data_From_Appllication+0x2fc>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	f040 8388 	bne.w	800152c <update_Data_From_Appllication+0x728>
		status.data_read_status = RX_DATA_READ_SUCCESSFULLY;
 8000e1c:	4bb8      	ldr	r3, [pc, #736]	@ (8001100 <update_Data_From_Appllication+0x2fc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
		if (stringValidation(((char *)serialInputBuffer), "IOEXP_PA", 8) == 0) {
 8000e22:	2208      	movs	r2, #8
 8000e24:	49b7      	ldr	r1, [pc, #732]	@ (8001104 <update_Data_From_Appllication+0x300>)
 8000e26:	48b8      	ldr	r0, [pc, #736]	@ (8001108 <update_Data_From_Appllication+0x304>)
 8000e28:	f000 fc54 	bl	80016d4 <stringValidation>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <update_Data_From_Appllication+0x34>
			validPort = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	e00c      	b.n	8000e52 <update_Data_From_Appllication+0x4e>
		} else if (stringValidation(((char *)serialInputBuffer), "IOEXP_PB", 8) == 0) {
 8000e38:	2208      	movs	r2, #8
 8000e3a:	49b4      	ldr	r1, [pc, #720]	@ (800110c <update_Data_From_Appllication+0x308>)
 8000e3c:	48b2      	ldr	r0, [pc, #712]	@ (8001108 <update_Data_From_Appllication+0x304>)
 8000e3e:	f000 fc49 	bl	80016d4 <stringValidation>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <update_Data_From_Appllication+0x4a>
			validPort = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	e001      	b.n	8000e52 <update_Data_From_Appllication+0x4e>
		} else {
			validPort = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71fb      	strb	r3, [r7, #7]
		}

		if (validPort > 0) {
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 8369 	beq.w	800152c <update_Data_From_Appllication+0x728>
			if (validPort == 1) {
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	f040 81b3 	bne.w	80011c8 <update_Data_From_Appllication+0x3c4>
				if ((pinNumber = arithmeticToNumeric((char *)(serialInputBuffer + 13)))
 8000e62:	4bab      	ldr	r3, [pc, #684]	@ (8001110 <update_Data_From_Appllication+0x30c>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fc1d 	bl	80016a4 <arithmeticToNumeric>
 8000e6a:	6038      	str	r0, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f2c0 835c 	blt.w	800152c <update_Data_From_Appllication+0x728>
						>= 0) {

					if (stringValidation((char *)(serialInputBuffer + 15), "SET_INPUT",
 8000e74:	4ba7      	ldr	r3, [pc, #668]	@ (8001114 <update_Data_From_Appllication+0x310>)
 8000e76:	2209      	movs	r2, #9
 8000e78:	49a7      	ldr	r1, [pc, #668]	@ (8001118 <update_Data_From_Appllication+0x314>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fc2a 	bl	80016d4 <stringValidation>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14e      	bne.n	8000f24 <update_Data_From_Appllication+0x120>
							9) == 0) {
						switch (pinNumber) {
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	f200 834f 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 8000e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <update_Data_From_Appllication+0x90>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000eb5 	.word	0x08000eb5
 8000e98:	08000ec3 	.word	0x08000ec3
 8000e9c:	08000ed1 	.word	0x08000ed1
 8000ea0:	08000edf 	.word	0x08000edf
 8000ea4:	08000eed 	.word	0x08000eed
 8000ea8:	08000efb 	.word	0x08000efb
 8000eac:	08000f09 	.word	0x08000f09
 8000eb0:	08000f17 	.word	0x08000f17

						case 0:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2120      	movs	r1, #32
 8000eba:	4898      	ldr	r0, [pc, #608]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000ebc:	f7ff ff64 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_0_DIR_INPUT);
							break;
 8000ec0:	e334      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 1:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4894      	ldr	r0, [pc, #592]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000eca:	f7ff ff5d 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_1_DIR_INPUT);
							break;
 8000ece:	e32d      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 2:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4891      	ldr	r0, [pc, #580]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000ed8:	f7ff ff56 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_2_DIR_INPUT);
							break;
 8000edc:	e326      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 3:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000ede:	2304      	movs	r3, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	488d      	ldr	r0, [pc, #564]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000ee6:	f7ff ff4f 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_3_DIR_INPUT);
							break;
 8000eea:	e31f      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 4:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000eec:	2305      	movs	r3, #5
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	488a      	ldr	r0, [pc, #552]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000ef4:	f7ff ff48 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_4_DIR_INPUT);
							break;
 8000ef8:	e318      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 5:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000efa:	2306      	movs	r3, #6
 8000efc:	2200      	movs	r2, #0
 8000efe:	2120      	movs	r1, #32
 8000f00:	4886      	ldr	r0, [pc, #536]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f02:	f7ff ff41 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_5_DIR_INPUT);
							break;
 8000f06:	e311      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 6:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f08:	2307      	movs	r3, #7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	4883      	ldr	r0, [pc, #524]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f10:	f7ff ff3a 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_6_DIR_INPUT);
							break;
 8000f14:	e30a      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 7:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f16:	2308      	movs	r3, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	487f      	ldr	r0, [pc, #508]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f1e:	f7ff ff33 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_7_DIR_INPUT);
							break;
 8000f22:	e303      	b.n	800152c <update_Data_From_Appllication+0x728>
						}
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 8000f24:	4b7b      	ldr	r3, [pc, #492]	@ (8001114 <update_Data_From_Appllication+0x310>)
 8000f26:	2209      	movs	r2, #9
 8000f28:	497d      	ldr	r1, [pc, #500]	@ (8001120 <update_Data_From_Appllication+0x31c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fbd2 	bl	80016d4 <stringValidation>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d14e      	bne.n	8000fd4 <update_Data_From_Appllication+0x1d0>
							"SET_OUTPUT", 9) == 0) {
						switch (pinNumber) {
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	f200 82f7 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 8000f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f44 <update_Data_From_Appllication+0x140>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f65 	.word	0x08000f65
 8000f48:	08000f73 	.word	0x08000f73
 8000f4c:	08000f81 	.word	0x08000f81
 8000f50:	08000f8f 	.word	0x08000f8f
 8000f54:	08000f9d 	.word	0x08000f9d
 8000f58:	08000fab 	.word	0x08000fab
 8000f5c:	08000fb9 	.word	0x08000fb9
 8000f60:	08000fc7 	.word	0x08000fc7
						case 0:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	486c      	ldr	r0, [pc, #432]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f6c:	f7ff ff0c 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_0_DIR_OUTPUT);
							break;
 8000f70:	e2dc      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 1:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f72:	2300      	movs	r3, #0
 8000f74:	2200      	movs	r2, #0
 8000f76:	2120      	movs	r1, #32
 8000f78:	4868      	ldr	r0, [pc, #416]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f7a:	f7ff ff05 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_1_DIR_OUTPUT);
							break;
 8000f7e:	e2d5      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 2:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f80:	2300      	movs	r3, #0
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	4865      	ldr	r0, [pc, #404]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f88:	f7ff fefe 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_2_DIR_OUTPUT);
							break;
 8000f8c:	e2ce      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 3:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2200      	movs	r2, #0
 8000f92:	2120      	movs	r1, #32
 8000f94:	4861      	ldr	r0, [pc, #388]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000f96:	f7ff fef7 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_3_DIR_OUTPUT);
							break;
 8000f9a:	e2c7      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 4:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	485e      	ldr	r0, [pc, #376]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000fa4:	f7ff fef0 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_4_DIR_OUTPUT);
							break;
 8000fa8:	e2c0      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 5:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000faa:	2300      	movs	r3, #0
 8000fac:	2200      	movs	r2, #0
 8000fae:	2120      	movs	r1, #32
 8000fb0:	485a      	ldr	r0, [pc, #360]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000fb2:	f7ff fee9 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_5_DIR_OUTPUT);
							break;
 8000fb6:	e2b9      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 6:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	4857      	ldr	r0, [pc, #348]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000fc0:	f7ff fee2 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_6_DIR_OUTPUT);
							break;
 8000fc4:	e2b2      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 7:
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRA,
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4853      	ldr	r0, [pc, #332]	@ (800111c <update_Data_From_Appllication+0x318>)
 8000fce:	f7ff fedb 	bl	8000d88 <ioExpanderwrite>
									IO_PIN_7_DIR_OUTPUT);
							break;
 8000fd2:	e2ab      	b.n	800152c <update_Data_From_Appllication+0x728>
						}
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 8000fd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001114 <update_Data_From_Appllication+0x310>)
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	4952      	ldr	r1, [pc, #328]	@ (8001124 <update_Data_From_Appllication+0x320>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fb7a 	bl	80016d4 <stringValidation>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 80e9 	bne.w	80011ba <update_Data_From_Appllication+0x3b6>
							"WRITE", 5) == 0) {
						switch (pinNumber) {
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b07      	cmp	r3, #7
 8000fec:	f200 829e 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 8000ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <update_Data_From_Appllication+0x1f4>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001019 	.word	0x08001019
 8000ffc:	08001047 	.word	0x08001047
 8001000:	08001075 	.word	0x08001075
 8001004:	080010a3 	.word	0x080010a3
 8001008:	080010d1 	.word	0x080010d1
 800100c:	08001131 	.word	0x08001131
 8001010:	0800115f 	.word	0x0800115f
 8001014:	0800118d 	.word	0x0800118d
						case 0:
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001018:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <update_Data_From_Appllication+0x324>)
 800101a:	2204      	movs	r2, #4
 800101c:	4943      	ldr	r1, [pc, #268]	@ (800112c <update_Data_From_Appllication+0x328>)
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fb58 	bl	80016d4 <stringValidation>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <update_Data_From_Appllication+0x234>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 800102a:	2301      	movs	r3, #1
 800102c:	2212      	movs	r2, #18
 800102e:	2120      	movs	r1, #32
 8001030:	483a      	ldr	r0, [pc, #232]	@ (800111c <update_Data_From_Appllication+0x318>)
 8001032:	f7ff fea9 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 8001036:	e279      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001038:	2300      	movs	r3, #0
 800103a:	2212      	movs	r2, #18
 800103c:	2120      	movs	r1, #32
 800103e:	4837      	ldr	r0, [pc, #220]	@ (800111c <update_Data_From_Appllication+0x318>)
 8001040:	f7ff fea2 	bl	8000d88 <ioExpanderwrite>
							break;
 8001044:	e272      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 1:
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001046:	4b38      	ldr	r3, [pc, #224]	@ (8001128 <update_Data_From_Appllication+0x324>)
 8001048:	2204      	movs	r2, #4
 800104a:	4938      	ldr	r1, [pc, #224]	@ (800112c <update_Data_From_Appllication+0x328>)
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb41 	bl	80016d4 <stringValidation>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <update_Data_From_Appllication+0x262>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001058:	2301      	movs	r3, #1
 800105a:	2212      	movs	r2, #18
 800105c:	2120      	movs	r1, #32
 800105e:	482f      	ldr	r0, [pc, #188]	@ (800111c <update_Data_From_Appllication+0x318>)
 8001060:	f7ff fe92 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 8001064:	e262      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001066:	2300      	movs	r3, #0
 8001068:	2212      	movs	r2, #18
 800106a:	2120      	movs	r1, #32
 800106c:	482b      	ldr	r0, [pc, #172]	@ (800111c <update_Data_From_Appllication+0x318>)
 800106e:	f7ff fe8b 	bl	8000d88 <ioExpanderwrite>
							break;
 8001072:	e25b      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 2:
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <update_Data_From_Appllication+0x324>)
 8001076:	2204      	movs	r2, #4
 8001078:	492c      	ldr	r1, [pc, #176]	@ (800112c <update_Data_From_Appllication+0x328>)
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fb2a 	bl	80016d4 <stringValidation>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <update_Data_From_Appllication+0x290>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001086:	2301      	movs	r3, #1
 8001088:	2212      	movs	r2, #18
 800108a:	2120      	movs	r1, #32
 800108c:	4823      	ldr	r0, [pc, #140]	@ (800111c <update_Data_From_Appllication+0x318>)
 800108e:	f7ff fe7b 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 8001092:	e24b      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001094:	2300      	movs	r3, #0
 8001096:	2212      	movs	r2, #18
 8001098:	2120      	movs	r1, #32
 800109a:	4820      	ldr	r0, [pc, #128]	@ (800111c <update_Data_From_Appllication+0x318>)
 800109c:	f7ff fe74 	bl	8000d88 <ioExpanderwrite>
							break;
 80010a0:	e244      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 3:
							if (stringValidation((char *)(serialInputBuffer + 21),
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <update_Data_From_Appllication+0x324>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	4921      	ldr	r1, [pc, #132]	@ (800112c <update_Data_From_Appllication+0x328>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fb13 	bl	80016d4 <stringValidation>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d106      	bne.n	80010c2 <update_Data_From_Appllication+0x2be>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 80010b4:	2301      	movs	r3, #1
 80010b6:	2212      	movs	r2, #18
 80010b8:	2120      	movs	r1, #32
 80010ba:	4818      	ldr	r0, [pc, #96]	@ (800111c <update_Data_From_Appllication+0x318>)
 80010bc:	f7ff fe64 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 80010c0:	e234      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 80010c2:	2300      	movs	r3, #0
 80010c4:	2212      	movs	r2, #18
 80010c6:	2120      	movs	r1, #32
 80010c8:	4814      	ldr	r0, [pc, #80]	@ (800111c <update_Data_From_Appllication+0x318>)
 80010ca:	f7ff fe5d 	bl	8000d88 <ioExpanderwrite>
							break;
 80010ce:	e22d      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 4:
							if (stringValidation((char *)(serialInputBuffer + 21),
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <update_Data_From_Appllication+0x324>)
 80010d2:	2204      	movs	r2, #4
 80010d4:	4915      	ldr	r1, [pc, #84]	@ (800112c <update_Data_From_Appllication+0x328>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fafc 	bl	80016d4 <stringValidation>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <update_Data_From_Appllication+0x2ec>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 80010e2:	2301      	movs	r3, #1
 80010e4:	2212      	movs	r2, #18
 80010e6:	2120      	movs	r1, #32
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <update_Data_From_Appllication+0x318>)
 80010ea:	f7ff fe4d 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 80010ee:	e21d      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 80010f0:	2300      	movs	r3, #0
 80010f2:	2212      	movs	r2, #18
 80010f4:	2120      	movs	r1, #32
 80010f6:	4809      	ldr	r0, [pc, #36]	@ (800111c <update_Data_From_Appllication+0x318>)
 80010f8:	f7ff fe46 	bl	8000d88 <ioExpanderwrite>
							break;
 80010fc:	e216      	b.n	800152c <update_Data_From_Appllication+0x728>
 80010fe:	bf00      	nop
 8001100:	20000148 	.word	0x20000148
 8001104:	0800208c 	.word	0x0800208c
 8001108:	20000080 	.word	0x20000080
 800110c:	08002098 	.word	0x08002098
 8001110:	2000008d 	.word	0x2000008d
 8001114:	2000008f 	.word	0x2000008f
 8001118:	080020a4 	.word	0x080020a4
 800111c:	40005400 	.word	0x40005400
 8001120:	080020b0 	.word	0x080020b0
 8001124:	080020bc 	.word	0x080020bc
 8001128:	20000095 	.word	0x20000095
 800112c:	080020c4 	.word	0x080020c4
						case 5:
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001130:	4bc0      	ldr	r3, [pc, #768]	@ (8001434 <update_Data_From_Appllication+0x630>)
 8001132:	2204      	movs	r2, #4
 8001134:	49c0      	ldr	r1, [pc, #768]	@ (8001438 <update_Data_From_Appllication+0x634>)
 8001136:	4618      	mov	r0, r3
 8001138:	f000 facc 	bl	80016d4 <stringValidation>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d106      	bne.n	8001150 <update_Data_From_Appllication+0x34c>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001142:	2301      	movs	r3, #1
 8001144:	2212      	movs	r2, #18
 8001146:	2120      	movs	r1, #32
 8001148:	48bc      	ldr	r0, [pc, #752]	@ (800143c <update_Data_From_Appllication+0x638>)
 800114a:	f7ff fe1d 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 800114e:	e1ed      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001150:	2300      	movs	r3, #0
 8001152:	2212      	movs	r2, #18
 8001154:	2120      	movs	r1, #32
 8001156:	48b9      	ldr	r0, [pc, #740]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001158:	f7ff fe16 	bl	8000d88 <ioExpanderwrite>
							break;
 800115c:	e1e6      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 6:
							if (stringValidation((char *)(serialInputBuffer + 21),
 800115e:	4bb5      	ldr	r3, [pc, #724]	@ (8001434 <update_Data_From_Appllication+0x630>)
 8001160:	2204      	movs	r2, #4
 8001162:	49b5      	ldr	r1, [pc, #724]	@ (8001438 <update_Data_From_Appllication+0x634>)
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fab5 	bl	80016d4 <stringValidation>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d106      	bne.n	800117e <update_Data_From_Appllication+0x37a>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 8001170:	2301      	movs	r3, #1
 8001172:	2212      	movs	r2, #18
 8001174:	2120      	movs	r1, #32
 8001176:	48b1      	ldr	r0, [pc, #708]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001178:	f7ff fe06 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 800117c:	e1d6      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 800117e:	2300      	movs	r3, #0
 8001180:	2212      	movs	r2, #18
 8001182:	2120      	movs	r1, #32
 8001184:	48ad      	ldr	r0, [pc, #692]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001186:	f7ff fdff 	bl	8000d88 <ioExpanderwrite>
							break;
 800118a:	e1cf      	b.n	800152c <update_Data_From_Appllication+0x728>
						case 7:
							if (stringValidation((char *)(serialInputBuffer + 21),
 800118c:	4ba9      	ldr	r3, [pc, #676]	@ (8001434 <update_Data_From_Appllication+0x630>)
 800118e:	2204      	movs	r2, #4
 8001190:	49a9      	ldr	r1, [pc, #676]	@ (8001438 <update_Data_From_Appllication+0x634>)
 8001192:	4618      	mov	r0, r3
 8001194:	f000 fa9e 	bl	80016d4 <stringValidation>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <update_Data_From_Appllication+0x3a8>
									"HIGH", 4) == 0) {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 800119e:	2301      	movs	r3, #1
 80011a0:	2212      	movs	r2, #18
 80011a2:	2120      	movs	r1, #32
 80011a4:	48a5      	ldr	r0, [pc, #660]	@ (800143c <update_Data_From_Appllication+0x638>)
 80011a6:	f7ff fdef 	bl	8000d88 <ioExpanderwrite>
										IO_PIN_0_HIGH);
							} else {
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
										IO_PIN_0_LOW);
							}
							break;
 80011aa:	e1bf      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOA,
 80011ac:	2300      	movs	r3, #0
 80011ae:	2212      	movs	r2, #18
 80011b0:	2120      	movs	r1, #32
 80011b2:	48a2      	ldr	r0, [pc, #648]	@ (800143c <update_Data_From_Appllication+0x638>)
 80011b4:	f7ff fde8 	bl	8000d88 <ioExpanderwrite>
							break;
 80011b8:	e1b8      	b.n	800152c <update_Data_From_Appllication+0x728>
						}
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 80011ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001440 <update_Data_From_Appllication+0x63c>)
 80011bc:	2204      	movs	r2, #4
 80011be:	49a1      	ldr	r1, [pc, #644]	@ (8001444 <update_Data_From_Appllication+0x640>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fa87 	bl	80016d4 <stringValidation>

			}
		}
	}

}
 80011c6:	e1b1      	b.n	800152c <update_Data_From_Appllication+0x728>
			} else if (validPort == 2) {
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	f040 81ae 	bne.w	800152c <update_Data_From_Appllication+0x728>
				if ((pinNumber = arithmeticToNumeric((char *)(serialInputBuffer + 13)))
 80011d0:	4b9d      	ldr	r3, [pc, #628]	@ (8001448 <update_Data_From_Appllication+0x644>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fa66 	bl	80016a4 <arithmeticToNumeric>
 80011d8:	6038      	str	r0, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f2c0 81a5 	blt.w	800152c <update_Data_From_Appllication+0x728>
					if (stringValidation((char *)(serialInputBuffer + 15), "SET_INPUT",
 80011e2:	4b97      	ldr	r3, [pc, #604]	@ (8001440 <update_Data_From_Appllication+0x63c>)
 80011e4:	2209      	movs	r2, #9
 80011e6:	4999      	ldr	r1, [pc, #612]	@ (800144c <update_Data_From_Appllication+0x648>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fa73 	bl	80016d4 <stringValidation>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d14f      	bne.n	8001294 <update_Data_From_Appllication+0x490>
						switch (pinNumber) {
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	f200 8198 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 80011fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001204 <update_Data_From_Appllication+0x400>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001225 	.word	0x08001225
 8001208:	08001233 	.word	0x08001233
 800120c:	08001241 	.word	0x08001241
 8001210:	0800124f 	.word	0x0800124f
 8001214:	0800125d 	.word	0x0800125d
 8001218:	0800126b 	.word	0x0800126b
 800121c:	08001279 	.word	0x08001279
 8001220:	08001287 	.word	0x08001287
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001224:	2301      	movs	r3, #1
 8001226:	2201      	movs	r2, #1
 8001228:	2120      	movs	r1, #32
 800122a:	4884      	ldr	r0, [pc, #528]	@ (800143c <update_Data_From_Appllication+0x638>)
 800122c:	f7ff fdac 	bl	8000d88 <ioExpanderwrite>
							break;
 8001230:	e17c      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001232:	2302      	movs	r3, #2
 8001234:	2201      	movs	r2, #1
 8001236:	2120      	movs	r1, #32
 8001238:	4880      	ldr	r0, [pc, #512]	@ (800143c <update_Data_From_Appllication+0x638>)
 800123a:	f7ff fda5 	bl	8000d88 <ioExpanderwrite>
							break;
 800123e:	e175      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001240:	2303      	movs	r3, #3
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	487d      	ldr	r0, [pc, #500]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001248:	f7ff fd9e 	bl	8000d88 <ioExpanderwrite>
							break;
 800124c:	e16e      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 800124e:	2304      	movs	r3, #4
 8001250:	2201      	movs	r2, #1
 8001252:	2120      	movs	r1, #32
 8001254:	4879      	ldr	r0, [pc, #484]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001256:	f7ff fd97 	bl	8000d88 <ioExpanderwrite>
							break;
 800125a:	e167      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 800125c:	2305      	movs	r3, #5
 800125e:	2201      	movs	r2, #1
 8001260:	2120      	movs	r1, #32
 8001262:	4876      	ldr	r0, [pc, #472]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001264:	f7ff fd90 	bl	8000d88 <ioExpanderwrite>
							break;
 8001268:	e160      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 800126a:	2306      	movs	r3, #6
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	4872      	ldr	r0, [pc, #456]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001272:	f7ff fd89 	bl	8000d88 <ioExpanderwrite>
							break;
 8001276:	e159      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001278:	2307      	movs	r3, #7
 800127a:	2201      	movs	r2, #1
 800127c:	2120      	movs	r1, #32
 800127e:	486f      	ldr	r0, [pc, #444]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001280:	f7ff fd82 	bl	8000d88 <ioExpanderwrite>
							break;
 8001284:	e152      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001286:	2308      	movs	r3, #8
 8001288:	2201      	movs	r2, #1
 800128a:	2120      	movs	r1, #32
 800128c:	486b      	ldr	r0, [pc, #428]	@ (800143c <update_Data_From_Appllication+0x638>)
 800128e:	f7ff fd7b 	bl	8000d88 <ioExpanderwrite>
							break;
 8001292:	e14b      	b.n	800152c <update_Data_From_Appllication+0x728>
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 8001294:	4b6a      	ldr	r3, [pc, #424]	@ (8001440 <update_Data_From_Appllication+0x63c>)
 8001296:	2209      	movs	r2, #9
 8001298:	496d      	ldr	r1, [pc, #436]	@ (8001450 <update_Data_From_Appllication+0x64c>)
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fa1a 	bl	80016d4 <stringValidation>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d14e      	bne.n	8001344 <update_Data_From_Appllication+0x540>
						switch (pinNumber) {
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	f200 813f 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 80012ae:	a201      	add	r2, pc, #4	@ (adr r2, 80012b4 <update_Data_From_Appllication+0x4b0>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	080012d5 	.word	0x080012d5
 80012b8:	080012e3 	.word	0x080012e3
 80012bc:	080012f1 	.word	0x080012f1
 80012c0:	080012ff 	.word	0x080012ff
 80012c4:	0800130d 	.word	0x0800130d
 80012c8:	0800131b 	.word	0x0800131b
 80012cc:	08001329 	.word	0x08001329
 80012d0:	08001337 	.word	0x08001337
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 80012d4:	2300      	movs	r3, #0
 80012d6:	2201      	movs	r2, #1
 80012d8:	2120      	movs	r1, #32
 80012da:	4858      	ldr	r0, [pc, #352]	@ (800143c <update_Data_From_Appllication+0x638>)
 80012dc:	f7ff fd54 	bl	8000d88 <ioExpanderwrite>
							break;
 80012e0:	e124      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 80012e2:	2300      	movs	r3, #0
 80012e4:	2201      	movs	r2, #1
 80012e6:	2120      	movs	r1, #32
 80012e8:	4854      	ldr	r0, [pc, #336]	@ (800143c <update_Data_From_Appllication+0x638>)
 80012ea:	f7ff fd4d 	bl	8000d88 <ioExpanderwrite>
							break;
 80012ee:	e11d      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 80012f0:	2300      	movs	r3, #0
 80012f2:	2201      	movs	r2, #1
 80012f4:	2120      	movs	r1, #32
 80012f6:	4851      	ldr	r0, [pc, #324]	@ (800143c <update_Data_From_Appllication+0x638>)
 80012f8:	f7ff fd46 	bl	8000d88 <ioExpanderwrite>
							break;
 80012fc:	e116      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 80012fe:	2300      	movs	r3, #0
 8001300:	2201      	movs	r2, #1
 8001302:	2120      	movs	r1, #32
 8001304:	484d      	ldr	r0, [pc, #308]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001306:	f7ff fd3f 	bl	8000d88 <ioExpanderwrite>
							break;
 800130a:	e10f      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 800130c:	2300      	movs	r3, #0
 800130e:	2201      	movs	r2, #1
 8001310:	2120      	movs	r1, #32
 8001312:	484a      	ldr	r0, [pc, #296]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001314:	f7ff fd38 	bl	8000d88 <ioExpanderwrite>
							break;
 8001318:	e108      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	2120      	movs	r1, #32
 8001320:	4846      	ldr	r0, [pc, #280]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001322:	f7ff fd31 	bl	8000d88 <ioExpanderwrite>
							break;
 8001326:	e101      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001328:	2300      	movs	r3, #0
 800132a:	2201      	movs	r2, #1
 800132c:	2120      	movs	r1, #32
 800132e:	4843      	ldr	r0, [pc, #268]	@ (800143c <update_Data_From_Appllication+0x638>)
 8001330:	f7ff fd2a 	bl	8000d88 <ioExpanderwrite>
							break;
 8001334:	e0fa      	b.n	800152c <update_Data_From_Appllication+0x728>
							ioExpanderwrite(I2C1, 0x20, MCP23017_IODIRB,
 8001336:	2300      	movs	r3, #0
 8001338:	2201      	movs	r2, #1
 800133a:	2120      	movs	r1, #32
 800133c:	483f      	ldr	r0, [pc, #252]	@ (800143c <update_Data_From_Appllication+0x638>)
 800133e:	f7ff fd23 	bl	8000d88 <ioExpanderwrite>
							break;
 8001342:	e0f3      	b.n	800152c <update_Data_From_Appllication+0x728>
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 8001344:	4b3e      	ldr	r3, [pc, #248]	@ (8001440 <update_Data_From_Appllication+0x63c>)
 8001346:	2205      	movs	r2, #5
 8001348:	4942      	ldr	r1, [pc, #264]	@ (8001454 <update_Data_From_Appllication+0x650>)
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f9c2 	bl	80016d4 <stringValidation>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80e3 	bne.w	800151e <update_Data_From_Appllication+0x71a>
						switch (pinNumber) {
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b07      	cmp	r3, #7
 800135c:	f200 80e6 	bhi.w	800152c <update_Data_From_Appllication+0x728>
 8001360:	a201      	add	r2, pc, #4	@ (adr r2, 8001368 <update_Data_From_Appllication+0x564>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001389 	.word	0x08001389
 800136c:	080013b7 	.word	0x080013b7
 8001370:	080013e5 	.word	0x080013e5
 8001374:	08001413 	.word	0x08001413
 8001378:	08001467 	.word	0x08001467
 800137c:	08001495 	.word	0x08001495
 8001380:	080014c3 	.word	0x080014c3
 8001384:	080014f1 	.word	0x080014f1
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <update_Data_From_Appllication+0x630>)
 800138a:	2204      	movs	r2, #4
 800138c:	492a      	ldr	r1, [pc, #168]	@ (8001438 <update_Data_From_Appllication+0x634>)
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f9a0 	bl	80016d4 <stringValidation>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d106      	bne.n	80013a8 <update_Data_From_Appllication+0x5a4>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 800139a:	2301      	movs	r3, #1
 800139c:	2213      	movs	r2, #19
 800139e:	2120      	movs	r1, #32
 80013a0:	4826      	ldr	r0, [pc, #152]	@ (800143c <update_Data_From_Appllication+0x638>)
 80013a2:	f7ff fcf1 	bl	8000d88 <ioExpanderwrite>
							break;
 80013a6:	e0c1      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80013a8:	2300      	movs	r3, #0
 80013aa:	2213      	movs	r2, #19
 80013ac:	2120      	movs	r1, #32
 80013ae:	4823      	ldr	r0, [pc, #140]	@ (800143c <update_Data_From_Appllication+0x638>)
 80013b0:	f7ff fcea 	bl	8000d88 <ioExpanderwrite>
							break;
 80013b4:	e0ba      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <update_Data_From_Appllication+0x630>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	491f      	ldr	r1, [pc, #124]	@ (8001438 <update_Data_From_Appllication+0x634>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f989 	bl	80016d4 <stringValidation>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <update_Data_From_Appllication+0x5d2>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80013c8:	2301      	movs	r3, #1
 80013ca:	2213      	movs	r2, #19
 80013cc:	2120      	movs	r1, #32
 80013ce:	481b      	ldr	r0, [pc, #108]	@ (800143c <update_Data_From_Appllication+0x638>)
 80013d0:	f7ff fcda 	bl	8000d88 <ioExpanderwrite>
							break;
 80013d4:	e0aa      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80013d6:	2300      	movs	r3, #0
 80013d8:	2213      	movs	r2, #19
 80013da:	2120      	movs	r1, #32
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <update_Data_From_Appllication+0x638>)
 80013de:	f7ff fcd3 	bl	8000d88 <ioExpanderwrite>
							break;
 80013e2:	e0a3      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <update_Data_From_Appllication+0x630>)
 80013e6:	2204      	movs	r2, #4
 80013e8:	4913      	ldr	r1, [pc, #76]	@ (8001438 <update_Data_From_Appllication+0x634>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f972 	bl	80016d4 <stringValidation>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <update_Data_From_Appllication+0x600>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80013f6:	2301      	movs	r3, #1
 80013f8:	2213      	movs	r2, #19
 80013fa:	2120      	movs	r1, #32
 80013fc:	480f      	ldr	r0, [pc, #60]	@ (800143c <update_Data_From_Appllication+0x638>)
 80013fe:	f7ff fcc3 	bl	8000d88 <ioExpanderwrite>
							break;
 8001402:	e093      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001404:	2300      	movs	r3, #0
 8001406:	2213      	movs	r2, #19
 8001408:	2120      	movs	r1, #32
 800140a:	480c      	ldr	r0, [pc, #48]	@ (800143c <update_Data_From_Appllication+0x638>)
 800140c:	f7ff fcbc 	bl	8000d88 <ioExpanderwrite>
							break;
 8001410:	e08c      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <update_Data_From_Appllication+0x630>)
 8001414:	2204      	movs	r2, #4
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <update_Data_From_Appllication+0x634>)
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f95b 	bl	80016d4 <stringValidation>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d119      	bne.n	8001458 <update_Data_From_Appllication+0x654>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001424:	2301      	movs	r3, #1
 8001426:	2213      	movs	r2, #19
 8001428:	2120      	movs	r1, #32
 800142a:	4804      	ldr	r0, [pc, #16]	@ (800143c <update_Data_From_Appllication+0x638>)
 800142c:	f7ff fcac 	bl	8000d88 <ioExpanderwrite>
							break;
 8001430:	e07c      	b.n	800152c <update_Data_From_Appllication+0x728>
 8001432:	bf00      	nop
 8001434:	20000095 	.word	0x20000095
 8001438:	080020c4 	.word	0x080020c4
 800143c:	40005400 	.word	0x40005400
 8001440:	2000008f 	.word	0x2000008f
 8001444:	080020cc 	.word	0x080020cc
 8001448:	2000008d 	.word	0x2000008d
 800144c:	080020a4 	.word	0x080020a4
 8001450:	080020b0 	.word	0x080020b0
 8001454:	080020bc 	.word	0x080020bc
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001458:	2300      	movs	r3, #0
 800145a:	2213      	movs	r2, #19
 800145c:	2120      	movs	r1, #32
 800145e:	4835      	ldr	r0, [pc, #212]	@ (8001534 <update_Data_From_Appllication+0x730>)
 8001460:	f7ff fc92 	bl	8000d88 <ioExpanderwrite>
							break;
 8001464:	e062      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <update_Data_From_Appllication+0x734>)
 8001468:	2204      	movs	r2, #4
 800146a:	4934      	ldr	r1, [pc, #208]	@ (800153c <update_Data_From_Appllication+0x738>)
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f931 	bl	80016d4 <stringValidation>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <update_Data_From_Appllication+0x682>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001478:	2301      	movs	r3, #1
 800147a:	2213      	movs	r2, #19
 800147c:	2120      	movs	r1, #32
 800147e:	482d      	ldr	r0, [pc, #180]	@ (8001534 <update_Data_From_Appllication+0x730>)
 8001480:	f7ff fc82 	bl	8000d88 <ioExpanderwrite>
							break;
 8001484:	e052      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001486:	2300      	movs	r3, #0
 8001488:	2213      	movs	r2, #19
 800148a:	2120      	movs	r1, #32
 800148c:	4829      	ldr	r0, [pc, #164]	@ (8001534 <update_Data_From_Appllication+0x730>)
 800148e:	f7ff fc7b 	bl	8000d88 <ioExpanderwrite>
							break;
 8001492:	e04b      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 8001494:	4b28      	ldr	r3, [pc, #160]	@ (8001538 <update_Data_From_Appllication+0x734>)
 8001496:	2204      	movs	r2, #4
 8001498:	4928      	ldr	r1, [pc, #160]	@ (800153c <update_Data_From_Appllication+0x738>)
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f91a 	bl	80016d4 <stringValidation>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <update_Data_From_Appllication+0x6b0>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80014a6:	2301      	movs	r3, #1
 80014a8:	2213      	movs	r2, #19
 80014aa:	2120      	movs	r1, #32
 80014ac:	4821      	ldr	r0, [pc, #132]	@ (8001534 <update_Data_From_Appllication+0x730>)
 80014ae:	f7ff fc6b 	bl	8000d88 <ioExpanderwrite>
							break;
 80014b2:	e03b      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80014b4:	2300      	movs	r3, #0
 80014b6:	2213      	movs	r2, #19
 80014b8:	2120      	movs	r1, #32
 80014ba:	481e      	ldr	r0, [pc, #120]	@ (8001534 <update_Data_From_Appllication+0x730>)
 80014bc:	f7ff fc64 	bl	8000d88 <ioExpanderwrite>
							break;
 80014c0:	e034      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <update_Data_From_Appllication+0x734>)
 80014c4:	2204      	movs	r2, #4
 80014c6:	491d      	ldr	r1, [pc, #116]	@ (800153c <update_Data_From_Appllication+0x738>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f903 	bl	80016d4 <stringValidation>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <update_Data_From_Appllication+0x6de>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80014d4:	2301      	movs	r3, #1
 80014d6:	2213      	movs	r2, #19
 80014d8:	2120      	movs	r1, #32
 80014da:	4816      	ldr	r0, [pc, #88]	@ (8001534 <update_Data_From_Appllication+0x730>)
 80014dc:	f7ff fc54 	bl	8000d88 <ioExpanderwrite>
							break;
 80014e0:	e024      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 80014e2:	2300      	movs	r3, #0
 80014e4:	2213      	movs	r2, #19
 80014e6:	2120      	movs	r1, #32
 80014e8:	4812      	ldr	r0, [pc, #72]	@ (8001534 <update_Data_From_Appllication+0x730>)
 80014ea:	f7ff fc4d 	bl	8000d88 <ioExpanderwrite>
							break;
 80014ee:	e01d      	b.n	800152c <update_Data_From_Appllication+0x728>
							if (stringValidation((char *)(serialInputBuffer + 21),
 80014f0:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <update_Data_From_Appllication+0x734>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	4911      	ldr	r1, [pc, #68]	@ (800153c <update_Data_From_Appllication+0x738>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f8ec 	bl	80016d4 <stringValidation>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <update_Data_From_Appllication+0x70c>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001502:	2301      	movs	r3, #1
 8001504:	2213      	movs	r2, #19
 8001506:	2120      	movs	r1, #32
 8001508:	480a      	ldr	r0, [pc, #40]	@ (8001534 <update_Data_From_Appllication+0x730>)
 800150a:	f7ff fc3d 	bl	8000d88 <ioExpanderwrite>
							break;
 800150e:	e00d      	b.n	800152c <update_Data_From_Appllication+0x728>
								ioExpanderwrite(I2C1, 0x20, MCP23017_GPIOB,
 8001510:	2300      	movs	r3, #0
 8001512:	2213      	movs	r2, #19
 8001514:	2120      	movs	r1, #32
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <update_Data_From_Appllication+0x730>)
 8001518:	f7ff fc36 	bl	8000d88 <ioExpanderwrite>
							break;
 800151c:	e006      	b.n	800152c <update_Data_From_Appllication+0x728>
					} else if (stringValidation((char *)(serialInputBuffer + 15),
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <update_Data_From_Appllication+0x73c>)
 8001520:	2204      	movs	r2, #4
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <update_Data_From_Appllication+0x740>)
 8001524:	4618      	mov	r0, r3
 8001526:	f000 f8d5 	bl	80016d4 <stringValidation>
}
 800152a:	e7ff      	b.n	800152c <update_Data_From_Appllication+0x728>
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	20000095 	.word	0x20000095
 800153c:	080020c4 	.word	0x080020c4
 8001540:	2000008f 	.word	0x2000008f
 8001544:	080020cc 	.word	0x080020cc

08001548 <updateSerialInputBuffer>:



void updateSerialInputBuffer(const uint8_t chr) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	if(chr == START_BYTE) {
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b81      	cmp	r3, #129	@ 0x81
 8001556:	d106      	bne.n	8001566 <updateSerialInputBuffer+0x1e>
		status.rx_status = RX_ONGOING;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <updateSerialInputBuffer+0x64>)
 800155a:	2202      	movs	r2, #2
 800155c:	721a      	strb	r2, [r3, #8]
		status.rx_data_length = 0;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <updateSerialInputBuffer+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]

	}else if(status.rx_status == RX_ONGOING) {
		serialInputBuffer[status.rx_data_length] = chr;
		status.rx_data_length++;
	}
}
 8001564:	e01c      	b.n	80015a0 <updateSerialInputBuffer+0x58>
	}else if(chr == STOP_BYTE) {
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2ba5      	cmp	r3, #165	@ 0xa5
 800156a:	d10b      	bne.n	8001584 <updateSerialInputBuffer+0x3c>
		serialInputBuffer[status.rx_data_length] = '\0';
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <updateSerialInputBuffer+0x64>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <updateSerialInputBuffer+0x68>)
 8001572:	2100      	movs	r1, #0
 8001574:	54d1      	strb	r1, [r2, r3]
		status.rx_status = RX_COMPLETED;
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <updateSerialInputBuffer+0x64>)
 8001578:	2201      	movs	r2, #1
 800157a:	721a      	strb	r2, [r3, #8]
		status.data_read_status = RX_DATA_READY_TO_READ;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <updateSerialInputBuffer+0x64>)
 800157e:	2202      	movs	r2, #2
 8001580:	701a      	strb	r2, [r3, #0]
}
 8001582:	e00d      	b.n	80015a0 <updateSerialInputBuffer+0x58>
	}else if(status.rx_status == RX_ONGOING) {
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <updateSerialInputBuffer+0x64>)
 8001586:	7a1b      	ldrb	r3, [r3, #8]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d109      	bne.n	80015a0 <updateSerialInputBuffer+0x58>
		serialInputBuffer[status.rx_data_length] = chr;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <updateSerialInputBuffer+0x64>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <updateSerialInputBuffer+0x68>)
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	54ca      	strb	r2, [r1, r3]
		status.rx_data_length++;
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <updateSerialInputBuffer+0x64>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	3301      	adds	r3, #1
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <updateSerialInputBuffer+0x64>)
 800159e:	6053      	str	r3, [r2, #4]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	20000148 	.word	0x20000148
 80015b0:	20000080 	.word	0x20000080

080015b4 <uartPinInit>:


void uartPinInit(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0


	gpio_handler_t rx,tx;

	tx.mode = SET_PIN_ALTERNATIVE;
 80015ba:	2302      	movs	r3, #2
 80015bc:	717b      	strb	r3, [r7, #5]
	rx.mode = SET_PIN_ALTERNATIVE;
 80015be:	2302      	movs	r3, #2
 80015c0:	747b      	strb	r3, [r7, #17]

	tx.pin = 10;
 80015c2:	230a      	movs	r3, #10
 80015c4:	713b      	strb	r3, [r7, #4]
	rx.pin = 11;
 80015c6:	230b      	movs	r3, #11
 80015c8:	743b      	strb	r3, [r7, #16]

	tx.Afmode = SET_PIN_AF8;
 80015ca:	2308      	movs	r3, #8
 80015cc:	72bb      	strb	r3, [r7, #10]
	rx.Afmode = SET_PIN_AF8;
 80015ce:	2308      	movs	r3, #8
 80015d0:	75bb      	strb	r3, [r7, #22]

	tx.port = GPIOC;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <uartPinInit+0x5c>)
 80015d4:	603b      	str	r3, [r7, #0]
	rx.port = GPIOC;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <uartPinInit+0x5c>)
 80015d8:	60fb      	str	r3, [r7, #12]

	tx.pull_up_down = SET_PIN_NOPUPD;
 80015da:	2300      	movs	r3, #0
 80015dc:	723b      	strb	r3, [r7, #8]
	rx.pull_up_down = SET_PIN_NOPUPD;
 80015de:	2300      	movs	r3, #0
 80015e0:	753b      	strb	r3, [r7, #20]

	tx.output_type = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	71bb      	strb	r3, [r7, #6]
	rx.output_type = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	74bb      	strb	r3, [r7, #18]

	tx.ouput_speed = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
	rx.ouput_speed = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	74fb      	strb	r3, [r7, #19]

	GpioPinSet(tx);
 80015f2:	463b      	mov	r3, r7
 80015f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015f8:	f7fe feca 	bl	8000390 <GpioPinSet>
	GpioPinSet(rx);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001604:	f7fe fec4 	bl	8000390 <GpioPinSet>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020800 	.word	0x40020800

08001614 <userApplicationInit>:


void userApplicationInit(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
	uartPinInit();
 800161a:	f7ff ffcb 	bl	80015b4 <uartPinInit>
	usartHandle_t uart;

	uart.baudRate = 9600;
 800161e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001622:	607b      	str	r3, [r7, #4]
	uart.usartBase = UART4;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <userApplicationInit+0x50>)
 8001626:	603b      	str	r3, [r7, #0]
	uart.overSampling = OVERSAMPLING_16;
 8001628:	2300      	movs	r3, #0
 800162a:	727b      	strb	r3, [r7, #9]
	uart.parityBit = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	72bb      	strb	r3, [r7, #10]
	uart.stopBit = STOP_BIT_0;
 8001630:	2300      	movs	r3, #0
 8001632:	723b      	strb	r3, [r7, #8]
	uart.wordLength = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	737b      	strb	r3, [r7, #13]

	uartInit(&uart);
 8001638:	463b      	mov	r3, r7
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f994 	bl	8000968 <uartInit>
	NvicEnableInt(UART4_IRQn);
 8001640:	2034      	movs	r0, #52	@ 0x34
 8001642:	f7ff f86d 	bl	8000720 <NvicEnableInt>

	if (uartInterruptEnable(UART4, RX_INTERRUPT)
 8001646:	2109      	movs	r1, #9
 8001648:	4806      	ldr	r0, [pc, #24]	@ (8001664 <userApplicationInit+0x50>)
 800164a:	f7ff fadf 	bl	8000c0c <uartInterruptEnable>
 800164e:	4603      	mov	r3, r0
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d102      	bne.n	800165a <userApplicationInit+0x46>
			== USART_RX_INTERRUPT_NOT_ENABLED) {
		printf("uart Interrupt was Not Enable\n");
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <userApplicationInit+0x54>)
 8001656:	f000 f979 	bl	800194c <puts>
	}

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004c00 	.word	0x40004c00
 8001668:	080020d4 	.word	0x080020d4

0800166c <UART4_IRQHandler>:


void UART4_IRQHandler(void) {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

	uartInterruptDisable(UART4,RX_INTERRUPT);
 8001670:	2109      	movs	r1, #9
 8001672:	480b      	ldr	r0, [pc, #44]	@ (80016a0 <UART4_IRQHandler+0x34>)
 8001674:	f7ff fb08 	bl	8000c88 <uartInterruptDisable>
	while(! ( (UART4->SR) & (1 << 5)) );
 8001678:	bf00      	nop
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <UART4_IRQHandler+0x34>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f9      	beq.n	800167a <UART4_IRQHandler+0xe>
	updateSerialInputBuffer(UART4->DR);
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <UART4_IRQHandler+0x34>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5b 	bl	8001548 <updateSerialInputBuffer>
	uartInterruptEnable(UART4,RX_INTERRUPT);
 8001692:	2109      	movs	r1, #9
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <UART4_IRQHandler+0x34>)
 8001696:	f7ff fab9 	bl	8000c0c <uartInterruptEnable>
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004c00 	.word	0x40004c00

080016a4 <arithmeticToNumeric>:
	}

	return 0;
}

int32_t arithmeticToNumeric(char *chr) {
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	int32_t value;

	value = ((*chr) - '0');
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3b30      	subs	r3, #48	@ 0x30
 80016b2:	60fb      	str	r3, [r7, #12]
	if ( (value >= 0) && ( value < 8)) {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db04      	blt.n	80016c4 <arithmeticToNumeric+0x20>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b07      	cmp	r3, #7
 80016be:	dc01      	bgt.n	80016c4 <arithmeticToNumeric+0x20>
		return value;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	e001      	b.n	80016c8 <arithmeticToNumeric+0x24>
	}

	return(-1);
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <stringValidation>:

uint8_t stringValidation(char *src, char *des, uint32_t len) {
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	uint32_t Index = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

	for( ;Index < len; Index++) {
 80016e4:	e00e      	b.n	8001704 <stringValidation+0x30>
		if(src[Index] != des[Index]) {
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	68b9      	ldr	r1, [r7, #8]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	440b      	add	r3, r1
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <stringValidation+0x2a>
			return 1;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e007      	b.n	800170e <stringValidation+0x3a>
	for( ;Index < len; Index++) {
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d3ec      	bcc.n	80016e6 <stringValidation+0x12>
		}
	}
	return 0;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <std>:
 800171c:	2300      	movs	r3, #0
 800171e:	b510      	push	{r4, lr}
 8001720:	4604      	mov	r4, r0
 8001722:	e9c0 3300 	strd	r3, r3, [r0]
 8001726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800172a:	6083      	str	r3, [r0, #8]
 800172c:	8181      	strh	r1, [r0, #12]
 800172e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001730:	81c2      	strh	r2, [r0, #14]
 8001732:	6183      	str	r3, [r0, #24]
 8001734:	4619      	mov	r1, r3
 8001736:	2208      	movs	r2, #8
 8001738:	305c      	adds	r0, #92	@ 0x5c
 800173a:	f000 f9e7 	bl	8001b0c <memset>
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <std+0x58>)
 8001740:	6263      	str	r3, [r4, #36]	@ 0x24
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <std+0x5c>)
 8001744:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <std+0x60>)
 8001748:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <std+0x64>)
 800174c:	6323      	str	r3, [r4, #48]	@ 0x30
 800174e:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <std+0x68>)
 8001750:	6224      	str	r4, [r4, #32]
 8001752:	429c      	cmp	r4, r3
 8001754:	d006      	beq.n	8001764 <std+0x48>
 8001756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800175a:	4294      	cmp	r4, r2
 800175c:	d002      	beq.n	8001764 <std+0x48>
 800175e:	33d0      	adds	r3, #208	@ 0xd0
 8001760:	429c      	cmp	r4, r3
 8001762:	d105      	bne.n	8001770 <std+0x54>
 8001764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800176c:	f000 ba46 	b.w	8001bfc <__retarget_lock_init_recursive>
 8001770:	bd10      	pop	{r4, pc}
 8001772:	bf00      	nop
 8001774:	0800195d 	.word	0x0800195d
 8001778:	0800197f 	.word	0x0800197f
 800177c:	080019b7 	.word	0x080019b7
 8001780:	080019db 	.word	0x080019db
 8001784:	20000154 	.word	0x20000154

08001788 <stdio_exit_handler>:
 8001788:	4a02      	ldr	r2, [pc, #8]	@ (8001794 <stdio_exit_handler+0xc>)
 800178a:	4903      	ldr	r1, [pc, #12]	@ (8001798 <stdio_exit_handler+0x10>)
 800178c:	4803      	ldr	r0, [pc, #12]	@ (800179c <stdio_exit_handler+0x14>)
 800178e:	f000 b869 	b.w	8001864 <_fwalk_sglue>
 8001792:	bf00      	nop
 8001794:	20000000 	.word	0x20000000
 8001798:	08001efd 	.word	0x08001efd
 800179c:	20000010 	.word	0x20000010

080017a0 <cleanup_stdio>:
 80017a0:	6841      	ldr	r1, [r0, #4]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <cleanup_stdio+0x34>)
 80017a4:	4299      	cmp	r1, r3
 80017a6:	b510      	push	{r4, lr}
 80017a8:	4604      	mov	r4, r0
 80017aa:	d001      	beq.n	80017b0 <cleanup_stdio+0x10>
 80017ac:	f000 fba6 	bl	8001efc <_fflush_r>
 80017b0:	68a1      	ldr	r1, [r4, #8]
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <cleanup_stdio+0x38>)
 80017b4:	4299      	cmp	r1, r3
 80017b6:	d002      	beq.n	80017be <cleanup_stdio+0x1e>
 80017b8:	4620      	mov	r0, r4
 80017ba:	f000 fb9f 	bl	8001efc <_fflush_r>
 80017be:	68e1      	ldr	r1, [r4, #12]
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <cleanup_stdio+0x3c>)
 80017c2:	4299      	cmp	r1, r3
 80017c4:	d004      	beq.n	80017d0 <cleanup_stdio+0x30>
 80017c6:	4620      	mov	r0, r4
 80017c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017cc:	f000 bb96 	b.w	8001efc <_fflush_r>
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	bf00      	nop
 80017d4:	20000154 	.word	0x20000154
 80017d8:	200001bc 	.word	0x200001bc
 80017dc:	20000224 	.word	0x20000224

080017e0 <global_stdio_init.part.0>:
 80017e0:	b510      	push	{r4, lr}
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <global_stdio_init.part.0+0x30>)
 80017e4:	4c0b      	ldr	r4, [pc, #44]	@ (8001814 <global_stdio_init.part.0+0x34>)
 80017e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <global_stdio_init.part.0+0x38>)
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	4620      	mov	r0, r4
 80017ec:	2200      	movs	r2, #0
 80017ee:	2104      	movs	r1, #4
 80017f0:	f7ff ff94 	bl	800171c <std>
 80017f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017f8:	2201      	movs	r2, #1
 80017fa:	2109      	movs	r1, #9
 80017fc:	f7ff ff8e 	bl	800171c <std>
 8001800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001804:	2202      	movs	r2, #2
 8001806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180a:	2112      	movs	r1, #18
 800180c:	f7ff bf86 	b.w	800171c <std>
 8001810:	2000028c 	.word	0x2000028c
 8001814:	20000154 	.word	0x20000154
 8001818:	08001789 	.word	0x08001789

0800181c <__sfp_lock_acquire>:
 800181c:	4801      	ldr	r0, [pc, #4]	@ (8001824 <__sfp_lock_acquire+0x8>)
 800181e:	f000 b9ee 	b.w	8001bfe <__retarget_lock_acquire_recursive>
 8001822:	bf00      	nop
 8001824:	20000295 	.word	0x20000295

08001828 <__sfp_lock_release>:
 8001828:	4801      	ldr	r0, [pc, #4]	@ (8001830 <__sfp_lock_release+0x8>)
 800182a:	f000 b9e9 	b.w	8001c00 <__retarget_lock_release_recursive>
 800182e:	bf00      	nop
 8001830:	20000295 	.word	0x20000295

08001834 <__sinit>:
 8001834:	b510      	push	{r4, lr}
 8001836:	4604      	mov	r4, r0
 8001838:	f7ff fff0 	bl	800181c <__sfp_lock_acquire>
 800183c:	6a23      	ldr	r3, [r4, #32]
 800183e:	b11b      	cbz	r3, 8001848 <__sinit+0x14>
 8001840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001844:	f7ff bff0 	b.w	8001828 <__sfp_lock_release>
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__sinit+0x28>)
 800184a:	6223      	str	r3, [r4, #32]
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <__sinit+0x2c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f5      	bne.n	8001840 <__sinit+0xc>
 8001854:	f7ff ffc4 	bl	80017e0 <global_stdio_init.part.0>
 8001858:	e7f2      	b.n	8001840 <__sinit+0xc>
 800185a:	bf00      	nop
 800185c:	080017a1 	.word	0x080017a1
 8001860:	2000028c 	.word	0x2000028c

08001864 <_fwalk_sglue>:
 8001864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001868:	4607      	mov	r7, r0
 800186a:	4688      	mov	r8, r1
 800186c:	4614      	mov	r4, r2
 800186e:	2600      	movs	r6, #0
 8001870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001874:	f1b9 0901 	subs.w	r9, r9, #1
 8001878:	d505      	bpl.n	8001886 <_fwalk_sglue+0x22>
 800187a:	6824      	ldr	r4, [r4, #0]
 800187c:	2c00      	cmp	r4, #0
 800187e:	d1f7      	bne.n	8001870 <_fwalk_sglue+0xc>
 8001880:	4630      	mov	r0, r6
 8001882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001886:	89ab      	ldrh	r3, [r5, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d907      	bls.n	800189c <_fwalk_sglue+0x38>
 800188c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001890:	3301      	adds	r3, #1
 8001892:	d003      	beq.n	800189c <_fwalk_sglue+0x38>
 8001894:	4629      	mov	r1, r5
 8001896:	4638      	mov	r0, r7
 8001898:	47c0      	blx	r8
 800189a:	4306      	orrs	r6, r0
 800189c:	3568      	adds	r5, #104	@ 0x68
 800189e:	e7e9      	b.n	8001874 <_fwalk_sglue+0x10>

080018a0 <_puts_r>:
 80018a0:	6a03      	ldr	r3, [r0, #32]
 80018a2:	b570      	push	{r4, r5, r6, lr}
 80018a4:	6884      	ldr	r4, [r0, #8]
 80018a6:	4605      	mov	r5, r0
 80018a8:	460e      	mov	r6, r1
 80018aa:	b90b      	cbnz	r3, 80018b0 <_puts_r+0x10>
 80018ac:	f7ff ffc2 	bl	8001834 <__sinit>
 80018b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	d405      	bmi.n	80018c2 <_puts_r+0x22>
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	0598      	lsls	r0, r3, #22
 80018ba:	d402      	bmi.n	80018c2 <_puts_r+0x22>
 80018bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018be:	f000 f99e 	bl	8001bfe <__retarget_lock_acquire_recursive>
 80018c2:	89a3      	ldrh	r3, [r4, #12]
 80018c4:	0719      	lsls	r1, r3, #28
 80018c6:	d502      	bpl.n	80018ce <_puts_r+0x2e>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d135      	bne.n	800193a <_puts_r+0x9a>
 80018ce:	4621      	mov	r1, r4
 80018d0:	4628      	mov	r0, r5
 80018d2:	f000 f8c5 	bl	8001a60 <__swsetup_r>
 80018d6:	b380      	cbz	r0, 800193a <_puts_r+0x9a>
 80018d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80018dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018de:	07da      	lsls	r2, r3, #31
 80018e0:	d405      	bmi.n	80018ee <_puts_r+0x4e>
 80018e2:	89a3      	ldrh	r3, [r4, #12]
 80018e4:	059b      	lsls	r3, r3, #22
 80018e6:	d402      	bmi.n	80018ee <_puts_r+0x4e>
 80018e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018ea:	f000 f989 	bl	8001c00 <__retarget_lock_release_recursive>
 80018ee:	4628      	mov	r0, r5
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da04      	bge.n	8001900 <_puts_r+0x60>
 80018f6:	69a2      	ldr	r2, [r4, #24]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dc17      	bgt.n	800192c <_puts_r+0x8c>
 80018fc:	290a      	cmp	r1, #10
 80018fe:	d015      	beq.n	800192c <_puts_r+0x8c>
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	6022      	str	r2, [r4, #0]
 8001906:	7019      	strb	r1, [r3, #0]
 8001908:	68a3      	ldr	r3, [r4, #8]
 800190a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800190e:	3b01      	subs	r3, #1
 8001910:	60a3      	str	r3, [r4, #8]
 8001912:	2900      	cmp	r1, #0
 8001914:	d1ed      	bne.n	80018f2 <_puts_r+0x52>
 8001916:	2b00      	cmp	r3, #0
 8001918:	da11      	bge.n	800193e <_puts_r+0x9e>
 800191a:	4622      	mov	r2, r4
 800191c:	210a      	movs	r1, #10
 800191e:	4628      	mov	r0, r5
 8001920:	f000 f85f 	bl	80019e2 <__swbuf_r>
 8001924:	3001      	adds	r0, #1
 8001926:	d0d7      	beq.n	80018d8 <_puts_r+0x38>
 8001928:	250a      	movs	r5, #10
 800192a:	e7d7      	b.n	80018dc <_puts_r+0x3c>
 800192c:	4622      	mov	r2, r4
 800192e:	4628      	mov	r0, r5
 8001930:	f000 f857 	bl	80019e2 <__swbuf_r>
 8001934:	3001      	adds	r0, #1
 8001936:	d1e7      	bne.n	8001908 <_puts_r+0x68>
 8001938:	e7ce      	b.n	80018d8 <_puts_r+0x38>
 800193a:	3e01      	subs	r6, #1
 800193c:	e7e4      	b.n	8001908 <_puts_r+0x68>
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	6022      	str	r2, [r4, #0]
 8001944:	220a      	movs	r2, #10
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e7ee      	b.n	8001928 <_puts_r+0x88>
	...

0800194c <puts>:
 800194c:	4b02      	ldr	r3, [pc, #8]	@ (8001958 <puts+0xc>)
 800194e:	4601      	mov	r1, r0
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	f7ff bfa5 	b.w	80018a0 <_puts_r>
 8001956:	bf00      	nop
 8001958:	2000000c 	.word	0x2000000c

0800195c <__sread>:
 800195c:	b510      	push	{r4, lr}
 800195e:	460c      	mov	r4, r1
 8001960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001964:	f000 f8fc 	bl	8001b60 <_read_r>
 8001968:	2800      	cmp	r0, #0
 800196a:	bfab      	itete	ge
 800196c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800196e:	89a3      	ldrhlt	r3, [r4, #12]
 8001970:	181b      	addge	r3, r3, r0
 8001972:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001976:	bfac      	ite	ge
 8001978:	6563      	strge	r3, [r4, #84]	@ 0x54
 800197a:	81a3      	strhlt	r3, [r4, #12]
 800197c:	bd10      	pop	{r4, pc}

0800197e <__swrite>:
 800197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001982:	461f      	mov	r7, r3
 8001984:	898b      	ldrh	r3, [r1, #12]
 8001986:	05db      	lsls	r3, r3, #23
 8001988:	4605      	mov	r5, r0
 800198a:	460c      	mov	r4, r1
 800198c:	4616      	mov	r6, r2
 800198e:	d505      	bpl.n	800199c <__swrite+0x1e>
 8001990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001994:	2302      	movs	r3, #2
 8001996:	2200      	movs	r2, #0
 8001998:	f000 f8d0 	bl	8001b3c <_lseek_r>
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019a6:	81a3      	strh	r3, [r4, #12]
 80019a8:	4632      	mov	r2, r6
 80019aa:	463b      	mov	r3, r7
 80019ac:	4628      	mov	r0, r5
 80019ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019b2:	f000 b8e7 	b.w	8001b84 <_write_r>

080019b6 <__sseek>:
 80019b6:	b510      	push	{r4, lr}
 80019b8:	460c      	mov	r4, r1
 80019ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019be:	f000 f8bd 	bl	8001b3c <_lseek_r>
 80019c2:	1c43      	adds	r3, r0, #1
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	bf15      	itete	ne
 80019c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019d2:	81a3      	strheq	r3, [r4, #12]
 80019d4:	bf18      	it	ne
 80019d6:	81a3      	strhne	r3, [r4, #12]
 80019d8:	bd10      	pop	{r4, pc}

080019da <__sclose>:
 80019da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019de:	f000 b89d 	b.w	8001b1c <_close_r>

080019e2 <__swbuf_r>:
 80019e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e4:	460e      	mov	r6, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	4605      	mov	r5, r0
 80019ea:	b118      	cbz	r0, 80019f4 <__swbuf_r+0x12>
 80019ec:	6a03      	ldr	r3, [r0, #32]
 80019ee:	b90b      	cbnz	r3, 80019f4 <__swbuf_r+0x12>
 80019f0:	f7ff ff20 	bl	8001834 <__sinit>
 80019f4:	69a3      	ldr	r3, [r4, #24]
 80019f6:	60a3      	str	r3, [r4, #8]
 80019f8:	89a3      	ldrh	r3, [r4, #12]
 80019fa:	071a      	lsls	r2, r3, #28
 80019fc:	d501      	bpl.n	8001a02 <__swbuf_r+0x20>
 80019fe:	6923      	ldr	r3, [r4, #16]
 8001a00:	b943      	cbnz	r3, 8001a14 <__swbuf_r+0x32>
 8001a02:	4621      	mov	r1, r4
 8001a04:	4628      	mov	r0, r5
 8001a06:	f000 f82b 	bl	8001a60 <__swsetup_r>
 8001a0a:	b118      	cbz	r0, 8001a14 <__swbuf_r+0x32>
 8001a0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001a10:	4638      	mov	r0, r7
 8001a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	6922      	ldr	r2, [r4, #16]
 8001a18:	1a98      	subs	r0, r3, r2
 8001a1a:	6963      	ldr	r3, [r4, #20]
 8001a1c:	b2f6      	uxtb	r6, r6
 8001a1e:	4283      	cmp	r3, r0
 8001a20:	4637      	mov	r7, r6
 8001a22:	dc05      	bgt.n	8001a30 <__swbuf_r+0x4e>
 8001a24:	4621      	mov	r1, r4
 8001a26:	4628      	mov	r0, r5
 8001a28:	f000 fa68 	bl	8001efc <_fflush_r>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1ed      	bne.n	8001a0c <__swbuf_r+0x2a>
 8001a30:	68a3      	ldr	r3, [r4, #8]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60a3      	str	r3, [r4, #8]
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	6022      	str	r2, [r4, #0]
 8001a3c:	701e      	strb	r6, [r3, #0]
 8001a3e:	6962      	ldr	r2, [r4, #20]
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d004      	beq.n	8001a50 <__swbuf_r+0x6e>
 8001a46:	89a3      	ldrh	r3, [r4, #12]
 8001a48:	07db      	lsls	r3, r3, #31
 8001a4a:	d5e1      	bpl.n	8001a10 <__swbuf_r+0x2e>
 8001a4c:	2e0a      	cmp	r6, #10
 8001a4e:	d1df      	bne.n	8001a10 <__swbuf_r+0x2e>
 8001a50:	4621      	mov	r1, r4
 8001a52:	4628      	mov	r0, r5
 8001a54:	f000 fa52 	bl	8001efc <_fflush_r>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d0d9      	beq.n	8001a10 <__swbuf_r+0x2e>
 8001a5c:	e7d6      	b.n	8001a0c <__swbuf_r+0x2a>
	...

08001a60 <__swsetup_r>:
 8001a60:	b538      	push	{r3, r4, r5, lr}
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <__swsetup_r+0xa8>)
 8001a64:	4605      	mov	r5, r0
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	460c      	mov	r4, r1
 8001a6a:	b118      	cbz	r0, 8001a74 <__swsetup_r+0x14>
 8001a6c:	6a03      	ldr	r3, [r0, #32]
 8001a6e:	b90b      	cbnz	r3, 8001a74 <__swsetup_r+0x14>
 8001a70:	f7ff fee0 	bl	8001834 <__sinit>
 8001a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a78:	0719      	lsls	r1, r3, #28
 8001a7a:	d422      	bmi.n	8001ac2 <__swsetup_r+0x62>
 8001a7c:	06da      	lsls	r2, r3, #27
 8001a7e:	d407      	bmi.n	8001a90 <__swsetup_r+0x30>
 8001a80:	2209      	movs	r2, #9
 8001a82:	602a      	str	r2, [r5, #0]
 8001a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a88:	81a3      	strh	r3, [r4, #12]
 8001a8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a8e:	e033      	b.n	8001af8 <__swsetup_r+0x98>
 8001a90:	0758      	lsls	r0, r3, #29
 8001a92:	d512      	bpl.n	8001aba <__swsetup_r+0x5a>
 8001a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a96:	b141      	cbz	r1, 8001aaa <__swsetup_r+0x4a>
 8001a98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a9c:	4299      	cmp	r1, r3
 8001a9e:	d002      	beq.n	8001aa6 <__swsetup_r+0x46>
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f000 f8af 	bl	8001c04 <_free_r>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001aaa:	89a3      	ldrh	r3, [r4, #12]
 8001aac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ab0:	81a3      	strh	r3, [r4, #12]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6063      	str	r3, [r4, #4]
 8001ab6:	6923      	ldr	r3, [r4, #16]
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	81a3      	strh	r3, [r4, #12]
 8001ac2:	6923      	ldr	r3, [r4, #16]
 8001ac4:	b94b      	cbnz	r3, 8001ada <__swsetup_r+0x7a>
 8001ac6:	89a3      	ldrh	r3, [r4, #12]
 8001ac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ad0:	d003      	beq.n	8001ada <__swsetup_r+0x7a>
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	f000 fa5f 	bl	8001f98 <__smakebuf_r>
 8001ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ade:	f013 0201 	ands.w	r2, r3, #1
 8001ae2:	d00a      	beq.n	8001afa <__swsetup_r+0x9a>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60a2      	str	r2, [r4, #8]
 8001ae8:	6962      	ldr	r2, [r4, #20]
 8001aea:	4252      	negs	r2, r2
 8001aec:	61a2      	str	r2, [r4, #24]
 8001aee:	6922      	ldr	r2, [r4, #16]
 8001af0:	b942      	cbnz	r2, 8001b04 <__swsetup_r+0xa4>
 8001af2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001af6:	d1c5      	bne.n	8001a84 <__swsetup_r+0x24>
 8001af8:	bd38      	pop	{r3, r4, r5, pc}
 8001afa:	0799      	lsls	r1, r3, #30
 8001afc:	bf58      	it	pl
 8001afe:	6962      	ldrpl	r2, [r4, #20]
 8001b00:	60a2      	str	r2, [r4, #8]
 8001b02:	e7f4      	b.n	8001aee <__swsetup_r+0x8e>
 8001b04:	2000      	movs	r0, #0
 8001b06:	e7f7      	b.n	8001af8 <__swsetup_r+0x98>
 8001b08:	2000000c 	.word	0x2000000c

08001b0c <memset>:
 8001b0c:	4402      	add	r2, r0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d100      	bne.n	8001b16 <memset+0xa>
 8001b14:	4770      	bx	lr
 8001b16:	f803 1b01 	strb.w	r1, [r3], #1
 8001b1a:	e7f9      	b.n	8001b10 <memset+0x4>

08001b1c <_close_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_close_r+0x1c>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	602b      	str	r3, [r5, #0]
 8001b28:	f7fe fb9d 	bl	8000266 <_close>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d102      	bne.n	8001b36 <_close_r+0x1a>
 8001b30:	682b      	ldr	r3, [r5, #0]
 8001b32:	b103      	cbz	r3, 8001b36 <_close_r+0x1a>
 8001b34:	6023      	str	r3, [r4, #0]
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	20000290 	.word	0x20000290

08001b3c <_lseek_r>:
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4d07      	ldr	r5, [pc, #28]	@ (8001b5c <_lseek_r+0x20>)
 8001b40:	4604      	mov	r4, r0
 8001b42:	4608      	mov	r0, r1
 8001b44:	4611      	mov	r1, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	602a      	str	r2, [r5, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7fe fbb2 	bl	80002b4 <_lseek>
 8001b50:	1c43      	adds	r3, r0, #1
 8001b52:	d102      	bne.n	8001b5a <_lseek_r+0x1e>
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	b103      	cbz	r3, 8001b5a <_lseek_r+0x1e>
 8001b58:	6023      	str	r3, [r4, #0]
 8001b5a:	bd38      	pop	{r3, r4, r5, pc}
 8001b5c:	20000290 	.word	0x20000290

08001b60 <_read_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4d07      	ldr	r5, [pc, #28]	@ (8001b80 <_read_r+0x20>)
 8001b64:	4604      	mov	r4, r0
 8001b66:	4608      	mov	r0, r1
 8001b68:	4611      	mov	r1, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	602a      	str	r2, [r5, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f7fe fb40 	bl	80001f4 <_read>
 8001b74:	1c43      	adds	r3, r0, #1
 8001b76:	d102      	bne.n	8001b7e <_read_r+0x1e>
 8001b78:	682b      	ldr	r3, [r5, #0]
 8001b7a:	b103      	cbz	r3, 8001b7e <_read_r+0x1e>
 8001b7c:	6023      	str	r3, [r4, #0]
 8001b7e:	bd38      	pop	{r3, r4, r5, pc}
 8001b80:	20000290 	.word	0x20000290

08001b84 <_write_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d07      	ldr	r5, [pc, #28]	@ (8001ba4 <_write_r+0x20>)
 8001b88:	4604      	mov	r4, r0
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	602a      	str	r2, [r5, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7fe fb4b 	bl	800022e <_write>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_write_r+0x1e>
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_write_r+0x1e>
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	20000290 	.word	0x20000290

08001ba8 <__errno>:
 8001ba8:	4b01      	ldr	r3, [pc, #4]	@ (8001bb0 <__errno+0x8>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000000c 	.word	0x2000000c

08001bb4 <__libc_init_array>:
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8001bec <__libc_init_array+0x38>)
 8001bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8001bf0 <__libc_init_array+0x3c>)
 8001bba:	1b64      	subs	r4, r4, r5
 8001bbc:	10a4      	asrs	r4, r4, #2
 8001bbe:	2600      	movs	r6, #0
 8001bc0:	42a6      	cmp	r6, r4
 8001bc2:	d109      	bne.n	8001bd8 <__libc_init_array+0x24>
 8001bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8001bf4 <__libc_init_array+0x40>)
 8001bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8001bf8 <__libc_init_array+0x44>)
 8001bc8:	f000 fa54 	bl	8002074 <_init>
 8001bcc:	1b64      	subs	r4, r4, r5
 8001bce:	10a4      	asrs	r4, r4, #2
 8001bd0:	2600      	movs	r6, #0
 8001bd2:	42a6      	cmp	r6, r4
 8001bd4:	d105      	bne.n	8001be2 <__libc_init_array+0x2e>
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bdc:	4798      	blx	r3
 8001bde:	3601      	adds	r6, #1
 8001be0:	e7ee      	b.n	8001bc0 <__libc_init_array+0xc>
 8001be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001be6:	4798      	blx	r3
 8001be8:	3601      	adds	r6, #1
 8001bea:	e7f2      	b.n	8001bd2 <__libc_init_array+0x1e>
 8001bec:	080020f4 	.word	0x080020f4
 8001bf0:	080020f4 	.word	0x080020f4
 8001bf4:	080020f4 	.word	0x080020f4
 8001bf8:	080020f8 	.word	0x080020f8

08001bfc <__retarget_lock_init_recursive>:
 8001bfc:	4770      	bx	lr

08001bfe <__retarget_lock_acquire_recursive>:
 8001bfe:	4770      	bx	lr

08001c00 <__retarget_lock_release_recursive>:
 8001c00:	4770      	bx	lr
	...

08001c04 <_free_r>:
 8001c04:	b538      	push	{r3, r4, r5, lr}
 8001c06:	4605      	mov	r5, r0
 8001c08:	2900      	cmp	r1, #0
 8001c0a:	d041      	beq.n	8001c90 <_free_r+0x8c>
 8001c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c10:	1f0c      	subs	r4, r1, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bfb8      	it	lt
 8001c16:	18e4      	addlt	r4, r4, r3
 8001c18:	f000 f8e0 	bl	8001ddc <__malloc_lock>
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <_free_r+0x90>)
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	b933      	cbnz	r3, 8001c30 <_free_r+0x2c>
 8001c22:	6063      	str	r3, [r4, #4]
 8001c24:	6014      	str	r4, [r2, #0]
 8001c26:	4628      	mov	r0, r5
 8001c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c2c:	f000 b8dc 	b.w	8001de8 <__malloc_unlock>
 8001c30:	42a3      	cmp	r3, r4
 8001c32:	d908      	bls.n	8001c46 <_free_r+0x42>
 8001c34:	6820      	ldr	r0, [r4, #0]
 8001c36:	1821      	adds	r1, r4, r0
 8001c38:	428b      	cmp	r3, r1
 8001c3a:	bf01      	itttt	eq
 8001c3c:	6819      	ldreq	r1, [r3, #0]
 8001c3e:	685b      	ldreq	r3, [r3, #4]
 8001c40:	1809      	addeq	r1, r1, r0
 8001c42:	6021      	streq	r1, [r4, #0]
 8001c44:	e7ed      	b.n	8001c22 <_free_r+0x1e>
 8001c46:	461a      	mov	r2, r3
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	b10b      	cbz	r3, 8001c50 <_free_r+0x4c>
 8001c4c:	42a3      	cmp	r3, r4
 8001c4e:	d9fa      	bls.n	8001c46 <_free_r+0x42>
 8001c50:	6811      	ldr	r1, [r2, #0]
 8001c52:	1850      	adds	r0, r2, r1
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	d10b      	bne.n	8001c70 <_free_r+0x6c>
 8001c58:	6820      	ldr	r0, [r4, #0]
 8001c5a:	4401      	add	r1, r0
 8001c5c:	1850      	adds	r0, r2, r1
 8001c5e:	4283      	cmp	r3, r0
 8001c60:	6011      	str	r1, [r2, #0]
 8001c62:	d1e0      	bne.n	8001c26 <_free_r+0x22>
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	6053      	str	r3, [r2, #4]
 8001c6a:	4408      	add	r0, r1
 8001c6c:	6010      	str	r0, [r2, #0]
 8001c6e:	e7da      	b.n	8001c26 <_free_r+0x22>
 8001c70:	d902      	bls.n	8001c78 <_free_r+0x74>
 8001c72:	230c      	movs	r3, #12
 8001c74:	602b      	str	r3, [r5, #0]
 8001c76:	e7d6      	b.n	8001c26 <_free_r+0x22>
 8001c78:	6820      	ldr	r0, [r4, #0]
 8001c7a:	1821      	adds	r1, r4, r0
 8001c7c:	428b      	cmp	r3, r1
 8001c7e:	bf04      	itt	eq
 8001c80:	6819      	ldreq	r1, [r3, #0]
 8001c82:	685b      	ldreq	r3, [r3, #4]
 8001c84:	6063      	str	r3, [r4, #4]
 8001c86:	bf04      	itt	eq
 8001c88:	1809      	addeq	r1, r1, r0
 8001c8a:	6021      	streq	r1, [r4, #0]
 8001c8c:	6054      	str	r4, [r2, #4]
 8001c8e:	e7ca      	b.n	8001c26 <_free_r+0x22>
 8001c90:	bd38      	pop	{r3, r4, r5, pc}
 8001c92:	bf00      	nop
 8001c94:	2000029c 	.word	0x2000029c

08001c98 <sbrk_aligned>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4e0f      	ldr	r6, [pc, #60]	@ (8001cd8 <sbrk_aligned+0x40>)
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	6831      	ldr	r1, [r6, #0]
 8001ca0:	4605      	mov	r5, r0
 8001ca2:	b911      	cbnz	r1, 8001caa <sbrk_aligned+0x12>
 8001ca4:	f000 f9d6 	bl	8002054 <_sbrk_r>
 8001ca8:	6030      	str	r0, [r6, #0]
 8001caa:	4621      	mov	r1, r4
 8001cac:	4628      	mov	r0, r5
 8001cae:	f000 f9d1 	bl	8002054 <_sbrk_r>
 8001cb2:	1c43      	adds	r3, r0, #1
 8001cb4:	d103      	bne.n	8001cbe <sbrk_aligned+0x26>
 8001cb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cba:	4620      	mov	r0, r4
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
 8001cbe:	1cc4      	adds	r4, r0, #3
 8001cc0:	f024 0403 	bic.w	r4, r4, #3
 8001cc4:	42a0      	cmp	r0, r4
 8001cc6:	d0f8      	beq.n	8001cba <sbrk_aligned+0x22>
 8001cc8:	1a21      	subs	r1, r4, r0
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f000 f9c2 	bl	8002054 <_sbrk_r>
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	d1f2      	bne.n	8001cba <sbrk_aligned+0x22>
 8001cd4:	e7ef      	b.n	8001cb6 <sbrk_aligned+0x1e>
 8001cd6:	bf00      	nop
 8001cd8:	20000298 	.word	0x20000298

08001cdc <_malloc_r>:
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce0:	1ccd      	adds	r5, r1, #3
 8001ce2:	f025 0503 	bic.w	r5, r5, #3
 8001ce6:	3508      	adds	r5, #8
 8001ce8:	2d0c      	cmp	r5, #12
 8001cea:	bf38      	it	cc
 8001cec:	250c      	movcc	r5, #12
 8001cee:	2d00      	cmp	r5, #0
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	db01      	blt.n	8001cf8 <_malloc_r+0x1c>
 8001cf4:	42a9      	cmp	r1, r5
 8001cf6:	d904      	bls.n	8001d02 <_malloc_r+0x26>
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	6033      	str	r3, [r6, #0]
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dd8 <_malloc_r+0xfc>
 8001d06:	f000 f869 	bl	8001ddc <__malloc_lock>
 8001d0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d0e:	461c      	mov	r4, r3
 8001d10:	bb44      	cbnz	r4, 8001d64 <_malloc_r+0x88>
 8001d12:	4629      	mov	r1, r5
 8001d14:	4630      	mov	r0, r6
 8001d16:	f7ff ffbf 	bl	8001c98 <sbrk_aligned>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	d158      	bne.n	8001dd2 <_malloc_r+0xf6>
 8001d20:	f8d8 4000 	ldr.w	r4, [r8]
 8001d24:	4627      	mov	r7, r4
 8001d26:	2f00      	cmp	r7, #0
 8001d28:	d143      	bne.n	8001db2 <_malloc_r+0xd6>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	d04b      	beq.n	8001dc6 <_malloc_r+0xea>
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	4639      	mov	r1, r7
 8001d32:	4630      	mov	r0, r6
 8001d34:	eb04 0903 	add.w	r9, r4, r3
 8001d38:	f000 f98c 	bl	8002054 <_sbrk_r>
 8001d3c:	4581      	cmp	r9, r0
 8001d3e:	d142      	bne.n	8001dc6 <_malloc_r+0xea>
 8001d40:	6821      	ldr	r1, [r4, #0]
 8001d42:	1a6d      	subs	r5, r5, r1
 8001d44:	4629      	mov	r1, r5
 8001d46:	4630      	mov	r0, r6
 8001d48:	f7ff ffa6 	bl	8001c98 <sbrk_aligned>
 8001d4c:	3001      	adds	r0, #1
 8001d4e:	d03a      	beq.n	8001dc6 <_malloc_r+0xea>
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	442b      	add	r3, r5
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	f8d8 3000 	ldr.w	r3, [r8]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	bb62      	cbnz	r2, 8001db8 <_malloc_r+0xdc>
 8001d5e:	f8c8 7000 	str.w	r7, [r8]
 8001d62:	e00f      	b.n	8001d84 <_malloc_r+0xa8>
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	1b52      	subs	r2, r2, r5
 8001d68:	d420      	bmi.n	8001dac <_malloc_r+0xd0>
 8001d6a:	2a0b      	cmp	r2, #11
 8001d6c:	d917      	bls.n	8001d9e <_malloc_r+0xc2>
 8001d6e:	1961      	adds	r1, r4, r5
 8001d70:	42a3      	cmp	r3, r4
 8001d72:	6025      	str	r5, [r4, #0]
 8001d74:	bf18      	it	ne
 8001d76:	6059      	strne	r1, [r3, #4]
 8001d78:	6863      	ldr	r3, [r4, #4]
 8001d7a:	bf08      	it	eq
 8001d7c:	f8c8 1000 	streq.w	r1, [r8]
 8001d80:	5162      	str	r2, [r4, r5]
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	4630      	mov	r0, r6
 8001d86:	f000 f82f 	bl	8001de8 <__malloc_unlock>
 8001d8a:	f104 000b 	add.w	r0, r4, #11
 8001d8e:	1d23      	adds	r3, r4, #4
 8001d90:	f020 0007 	bic.w	r0, r0, #7
 8001d94:	1ac2      	subs	r2, r0, r3
 8001d96:	bf1c      	itt	ne
 8001d98:	1a1b      	subne	r3, r3, r0
 8001d9a:	50a3      	strne	r3, [r4, r2]
 8001d9c:	e7af      	b.n	8001cfe <_malloc_r+0x22>
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	42a3      	cmp	r3, r4
 8001da2:	bf0c      	ite	eq
 8001da4:	f8c8 2000 	streq.w	r2, [r8]
 8001da8:	605a      	strne	r2, [r3, #4]
 8001daa:	e7eb      	b.n	8001d84 <_malloc_r+0xa8>
 8001dac:	4623      	mov	r3, r4
 8001dae:	6864      	ldr	r4, [r4, #4]
 8001db0:	e7ae      	b.n	8001d10 <_malloc_r+0x34>
 8001db2:	463c      	mov	r4, r7
 8001db4:	687f      	ldr	r7, [r7, #4]
 8001db6:	e7b6      	b.n	8001d26 <_malloc_r+0x4a>
 8001db8:	461a      	mov	r2, r3
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	42a3      	cmp	r3, r4
 8001dbe:	d1fb      	bne.n	8001db8 <_malloc_r+0xdc>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6053      	str	r3, [r2, #4]
 8001dc4:	e7de      	b.n	8001d84 <_malloc_r+0xa8>
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	6033      	str	r3, [r6, #0]
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f000 f80c 	bl	8001de8 <__malloc_unlock>
 8001dd0:	e794      	b.n	8001cfc <_malloc_r+0x20>
 8001dd2:	6005      	str	r5, [r0, #0]
 8001dd4:	e7d6      	b.n	8001d84 <_malloc_r+0xa8>
 8001dd6:	bf00      	nop
 8001dd8:	2000029c 	.word	0x2000029c

08001ddc <__malloc_lock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	@ (8001de4 <__malloc_lock+0x8>)
 8001dde:	f7ff bf0e 	b.w	8001bfe <__retarget_lock_acquire_recursive>
 8001de2:	bf00      	nop
 8001de4:	20000294 	.word	0x20000294

08001de8 <__malloc_unlock>:
 8001de8:	4801      	ldr	r0, [pc, #4]	@ (8001df0 <__malloc_unlock+0x8>)
 8001dea:	f7ff bf09 	b.w	8001c00 <__retarget_lock_release_recursive>
 8001dee:	bf00      	nop
 8001df0:	20000294 	.word	0x20000294

08001df4 <__sflush_r>:
 8001df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfc:	0716      	lsls	r6, r2, #28
 8001dfe:	4605      	mov	r5, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	d454      	bmi.n	8001eae <__sflush_r+0xba>
 8001e04:	684b      	ldr	r3, [r1, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	dc02      	bgt.n	8001e10 <__sflush_r+0x1c>
 8001e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	dd48      	ble.n	8001ea2 <__sflush_r+0xae>
 8001e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e12:	2e00      	cmp	r6, #0
 8001e14:	d045      	beq.n	8001ea2 <__sflush_r+0xae>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e1c:	682f      	ldr	r7, [r5, #0]
 8001e1e:	6a21      	ldr	r1, [r4, #32]
 8001e20:	602b      	str	r3, [r5, #0]
 8001e22:	d030      	beq.n	8001e86 <__sflush_r+0x92>
 8001e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e26:	89a3      	ldrh	r3, [r4, #12]
 8001e28:	0759      	lsls	r1, r3, #29
 8001e2a:	d505      	bpl.n	8001e38 <__sflush_r+0x44>
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	1ad2      	subs	r2, r2, r3
 8001e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e32:	b10b      	cbz	r3, 8001e38 <__sflush_r+0x44>
 8001e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	2300      	movs	r3, #0
 8001e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e3c:	6a21      	ldr	r1, [r4, #32]
 8001e3e:	4628      	mov	r0, r5
 8001e40:	47b0      	blx	r6
 8001e42:	1c43      	adds	r3, r0, #1
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	d106      	bne.n	8001e56 <__sflush_r+0x62>
 8001e48:	6829      	ldr	r1, [r5, #0]
 8001e4a:	291d      	cmp	r1, #29
 8001e4c:	d82b      	bhi.n	8001ea6 <__sflush_r+0xb2>
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef8 <__sflush_r+0x104>)
 8001e50:	410a      	asrs	r2, r1
 8001e52:	07d6      	lsls	r6, r2, #31
 8001e54:	d427      	bmi.n	8001ea6 <__sflush_r+0xb2>
 8001e56:	2200      	movs	r2, #0
 8001e58:	6062      	str	r2, [r4, #4]
 8001e5a:	04d9      	lsls	r1, r3, #19
 8001e5c:	6922      	ldr	r2, [r4, #16]
 8001e5e:	6022      	str	r2, [r4, #0]
 8001e60:	d504      	bpl.n	8001e6c <__sflush_r+0x78>
 8001e62:	1c42      	adds	r2, r0, #1
 8001e64:	d101      	bne.n	8001e6a <__sflush_r+0x76>
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	b903      	cbnz	r3, 8001e6c <__sflush_r+0x78>
 8001e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e6e:	602f      	str	r7, [r5, #0]
 8001e70:	b1b9      	cbz	r1, 8001ea2 <__sflush_r+0xae>
 8001e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e76:	4299      	cmp	r1, r3
 8001e78:	d002      	beq.n	8001e80 <__sflush_r+0x8c>
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f7ff fec2 	bl	8001c04 <_free_r>
 8001e80:	2300      	movs	r3, #0
 8001e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e84:	e00d      	b.n	8001ea2 <__sflush_r+0xae>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4628      	mov	r0, r5
 8001e8a:	47b0      	blx	r6
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	1c50      	adds	r0, r2, #1
 8001e90:	d1c9      	bne.n	8001e26 <__sflush_r+0x32>
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0c6      	beq.n	8001e26 <__sflush_r+0x32>
 8001e98:	2b1d      	cmp	r3, #29
 8001e9a:	d001      	beq.n	8001ea0 <__sflush_r+0xac>
 8001e9c:	2b16      	cmp	r3, #22
 8001e9e:	d11e      	bne.n	8001ede <__sflush_r+0xea>
 8001ea0:	602f      	str	r7, [r5, #0]
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	e022      	b.n	8001eec <__sflush_r+0xf8>
 8001ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	e01b      	b.n	8001ee6 <__sflush_r+0xf2>
 8001eae:	690f      	ldr	r7, [r1, #16]
 8001eb0:	2f00      	cmp	r7, #0
 8001eb2:	d0f6      	beq.n	8001ea2 <__sflush_r+0xae>
 8001eb4:	0793      	lsls	r3, r2, #30
 8001eb6:	680e      	ldr	r6, [r1, #0]
 8001eb8:	bf08      	it	eq
 8001eba:	694b      	ldreq	r3, [r1, #20]
 8001ebc:	600f      	str	r7, [r1, #0]
 8001ebe:	bf18      	it	ne
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	eba6 0807 	sub.w	r8, r6, r7
 8001ec6:	608b      	str	r3, [r1, #8]
 8001ec8:	f1b8 0f00 	cmp.w	r8, #0
 8001ecc:	dde9      	ble.n	8001ea2 <__sflush_r+0xae>
 8001ece:	6a21      	ldr	r1, [r4, #32]
 8001ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001ed2:	4643      	mov	r3, r8
 8001ed4:	463a      	mov	r2, r7
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	47b0      	blx	r6
 8001eda:	2800      	cmp	r0, #0
 8001edc:	dc08      	bgt.n	8001ef0 <__sflush_r+0xfc>
 8001ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee6:	81a3      	strh	r3, [r4, #12]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ef0:	4407      	add	r7, r0
 8001ef2:	eba8 0800 	sub.w	r8, r8, r0
 8001ef6:	e7e7      	b.n	8001ec8 <__sflush_r+0xd4>
 8001ef8:	dfbffffe 	.word	0xdfbffffe

08001efc <_fflush_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	690b      	ldr	r3, [r1, #16]
 8001f00:	4605      	mov	r5, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	b913      	cbnz	r3, 8001f0c <_fflush_r+0x10>
 8001f06:	2500      	movs	r5, #0
 8001f08:	4628      	mov	r0, r5
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
 8001f0c:	b118      	cbz	r0, 8001f16 <_fflush_r+0x1a>
 8001f0e:	6a03      	ldr	r3, [r0, #32]
 8001f10:	b90b      	cbnz	r3, 8001f16 <_fflush_r+0x1a>
 8001f12:	f7ff fc8f 	bl	8001834 <__sinit>
 8001f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f3      	beq.n	8001f06 <_fflush_r+0xa>
 8001f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f20:	07d0      	lsls	r0, r2, #31
 8001f22:	d404      	bmi.n	8001f2e <_fflush_r+0x32>
 8001f24:	0599      	lsls	r1, r3, #22
 8001f26:	d402      	bmi.n	8001f2e <_fflush_r+0x32>
 8001f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f2a:	f7ff fe68 	bl	8001bfe <__retarget_lock_acquire_recursive>
 8001f2e:	4628      	mov	r0, r5
 8001f30:	4621      	mov	r1, r4
 8001f32:	f7ff ff5f 	bl	8001df4 <__sflush_r>
 8001f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f38:	07da      	lsls	r2, r3, #31
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	d4e4      	bmi.n	8001f08 <_fflush_r+0xc>
 8001f3e:	89a3      	ldrh	r3, [r4, #12]
 8001f40:	059b      	lsls	r3, r3, #22
 8001f42:	d4e1      	bmi.n	8001f08 <_fflush_r+0xc>
 8001f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f46:	f7ff fe5b 	bl	8001c00 <__retarget_lock_release_recursive>
 8001f4a:	e7dd      	b.n	8001f08 <_fflush_r+0xc>

08001f4c <__swhatbuf_r>:
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	460c      	mov	r4, r1
 8001f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f54:	2900      	cmp	r1, #0
 8001f56:	b096      	sub	sp, #88	@ 0x58
 8001f58:	4615      	mov	r5, r2
 8001f5a:	461e      	mov	r6, r3
 8001f5c:	da0d      	bge.n	8001f7a <__swhatbuf_r+0x2e>
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2340      	movne	r3, #64	@ 0x40
 8001f6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f70:	2000      	movs	r0, #0
 8001f72:	6031      	str	r1, [r6, #0]
 8001f74:	602b      	str	r3, [r5, #0]
 8001f76:	b016      	add	sp, #88	@ 0x58
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	466a      	mov	r2, sp
 8001f7c:	f000 f848 	bl	8002010 <_fstat_r>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	dbec      	blt.n	8001f5e <__swhatbuf_r+0x12>
 8001f84:	9901      	ldr	r1, [sp, #4]
 8001f86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f8e:	4259      	negs	r1, r3
 8001f90:	4159      	adcs	r1, r3
 8001f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f96:	e7eb      	b.n	8001f70 <__swhatbuf_r+0x24>

08001f98 <__smakebuf_r>:
 8001f98:	898b      	ldrh	r3, [r1, #12]
 8001f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f9c:	079d      	lsls	r5, r3, #30
 8001f9e:	4606      	mov	r6, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	d507      	bpl.n	8001fb4 <__smakebuf_r+0x1c>
 8001fa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	6123      	str	r3, [r4, #16]
 8001fac:	2301      	movs	r3, #1
 8001fae:	6163      	str	r3, [r4, #20]
 8001fb0:	b003      	add	sp, #12
 8001fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb4:	ab01      	add	r3, sp, #4
 8001fb6:	466a      	mov	r2, sp
 8001fb8:	f7ff ffc8 	bl	8001f4c <__swhatbuf_r>
 8001fbc:	9f00      	ldr	r7, [sp, #0]
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	4639      	mov	r1, r7
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	f7ff fe8a 	bl	8001cdc <_malloc_r>
 8001fc8:	b948      	cbnz	r0, 8001fde <__smakebuf_r+0x46>
 8001fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fce:	059a      	lsls	r2, r3, #22
 8001fd0:	d4ee      	bmi.n	8001fb0 <__smakebuf_r+0x18>
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	81a3      	strh	r3, [r4, #12]
 8001fdc:	e7e2      	b.n	8001fa4 <__smakebuf_r+0xc>
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	6020      	str	r0, [r4, #0]
 8001fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	9b01      	ldr	r3, [sp, #4]
 8001fea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001fee:	b15b      	cbz	r3, 8002008 <__smakebuf_r+0x70>
 8001ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f000 f81d 	bl	8002034 <_isatty_r>
 8001ffa:	b128      	cbz	r0, 8002008 <__smakebuf_r+0x70>
 8001ffc:	89a3      	ldrh	r3, [r4, #12]
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	81a3      	strh	r3, [r4, #12]
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	431d      	orrs	r5, r3
 800200c:	81a5      	strh	r5, [r4, #12]
 800200e:	e7cf      	b.n	8001fb0 <__smakebuf_r+0x18>

08002010 <_fstat_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4d07      	ldr	r5, [pc, #28]	@ (8002030 <_fstat_r+0x20>)
 8002014:	2300      	movs	r3, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	f7fe f92e 	bl	800027e <_fstat>
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	d102      	bne.n	800202c <_fstat_r+0x1c>
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	b103      	cbz	r3, 800202c <_fstat_r+0x1c>
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	bd38      	pop	{r3, r4, r5, pc}
 800202e:	bf00      	nop
 8002030:	20000290 	.word	0x20000290

08002034 <_isatty_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4d06      	ldr	r5, [pc, #24]	@ (8002050 <_isatty_r+0x1c>)
 8002038:	2300      	movs	r3, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	602b      	str	r3, [r5, #0]
 8002040:	f7fe f92d 	bl	800029e <_isatty>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d102      	bne.n	800204e <_isatty_r+0x1a>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	b103      	cbz	r3, 800204e <_isatty_r+0x1a>
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	bd38      	pop	{r3, r4, r5, pc}
 8002050:	20000290 	.word	0x20000290

08002054 <_sbrk_r>:
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	4d06      	ldr	r5, [pc, #24]	@ (8002070 <_sbrk_r+0x1c>)
 8002058:	2300      	movs	r3, #0
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	602b      	str	r3, [r5, #0]
 8002060:	f7fe f936 	bl	80002d0 <_sbrk>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	d102      	bne.n	800206e <_sbrk_r+0x1a>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	b103      	cbz	r3, 800206e <_sbrk_r+0x1a>
 800206c:	6023      	str	r3, [r4, #0]
 800206e:	bd38      	pop	{r3, r4, r5, pc}
 8002070:	20000290 	.word	0x20000290

08002074 <_init>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	bf00      	nop
 8002078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207a:	bc08      	pop	{r3}
 800207c:	469e      	mov	lr, r3
 800207e:	4770      	bx	lr

08002080 <_fini>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr
